{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { Quote } from './models/Quote.js';\nimport { CitationError } from './models/CitationError.js';\nimport { DocumentError } from './models/DocumentError.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n\n  function stripQuotations(quote) {\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length - 1))) {\n      quote = quote.substring(0, quote.length - 1);\n    }\n    quote.replace(\"\\\"\", \"\");\n    return quote;\n  }\n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n        } else {\n          citationErrors.push(errorMessage);\n        }\n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (!hasCitationInQuote) {\n      let citationObject;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n      }\n      citationsErrorList.push(citationObject);\n    }\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n          quoteObject.setCitationIndex(index);\n          quoteObject.setCitationSection(secIndex);\n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n  }\n  function getCitationObject(citation) {\n    let citationObject;\n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        break;\n      }\n    }\n    return quoteObject;\n  }\n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      quoteObject.setQuoteErrors(quoteErrors);\n      quoteObject.setQuoteIndex(index);\n      quoteObject.setQuoteSection(secIndex);\n    }\n    dataEntriesList.push(quoteObject);\n  }\n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    let quoteObject = getQuoteObject(quote);\n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    dataEntriesList.unshift(quoteObject);\n    console.log(\"Error pushed into quote\");\n  }\n  function addDocumentError(errorMessage, secIndex, index) {\n    let documentErrorObject = new DocumentError(errorMessage, secIndex, index);\n    documentErrorList.push(documentErrorObject);\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  function findMlaBlockCitation(wordsInSection, secIndex) {\n    if (wordsInSection.join(\" \").wordsInSection.includes(\")\")) {\n      // Checks if the section contains a parenthesis. Possible block citation!\n      console.log(wordsInSection);\n      let citation = [];\n      let quote = [];\n\n      /* Going backwards in this section! :) */\n      for (let i = 0; i < wordsInSection - 1; i++) {\n        let startedCitationIndex = i;\n        while (true) {\n          i++;\n          let word = wordsInSection[i];\n          citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n          if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n            // If citation was found\n            addQuote(quote.join(\" \"), secIndex, i);\n            addCitation(quote.join(\" \"), citation.join(\" \"), secIndex, i);\n          } else if (!citation[0].includes(\"(\")) {\n            quote.push(word);\n          } else if (citation[0].includes(\"(\")) {\n            citation.push(word);\n          }\n        }\n      }\n    }\n  }\n\n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    if (!word.includes(\"(\") && citation === undefined) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [];\n    } else if (word.includes(\"(\") && startedCitationIndex === i) {\n      // If citation is right after quote.\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n    } else {\n      citation.push(word);\n    }\n    return [citation.join(\" \")];\n  }\n  function findMla(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n      let hasQuoteError = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        // console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length - 1;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that you missed one before the citation?\";\n              wordsInQuote.pop();\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            } else if (i === wordsinSectionLength) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            }\n          }\n          quote = wordsInQuote.join(\" \");\n          if (containsQuote) {\n            addQuote(quote, secIndex, i);\n          }\n          if (error !== undefined) {\n            // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n              // If citation was found\n              containsCitation = true;\n              break;\n            } else if (i === wordsinSectionLength && containsQuote) {\n              // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation, secIndex, i);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n          } else {\n            addDocumentError(\"Maybe add a warning here? There was not a citation in this paragraph\", secIndex, i);\n          }\n\n          /* Add Citation error if there is one!*/\n        }\n      }\n\n      if (!containsQuoteInSection && !hasQuoteError) {\n        // If the section does not contain a quote or quote errors. Could it be a block citation?\n        let blockCitation = findMlaBlockCitation(wordsInSection, secIndex);\n        if (!blockCitation) {\n          addDocumentError(\"No citation exists for this paragraph!\", secIndex, 0);\n        }\n      }\n    }\n  }\n  function findMlaWorksCited(sectionWorksCited, inputSections, totalNumberSections) {\n    for (let secIndex = sectionWorksCited; secIndex < totalNumberSections; secIndex++) {\n      let wordsInSection = inputSections[secIndex];\n      let decimalIndex = wordsInSection.indexOf(\".\");\n      console.log(decimalIndex);\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    const inputText = document.getElementById(\"inputText\").value;\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      addDocumentError(\"Make sure that the first 5 lines in your document contain your name, your teacher's name, \" + \"your class name, and the current date. Line 5 should contain your paper title\", 0, 0);\n    } else if (startParsingIndex > 6) {\n      addDocumentError(\"There are too many header/title lines before introduction of paper. \" + \"Consider removing empty lines between the title and headers of the document!\");\n    }\n    let sectionWorksCited; // Give the section works cited the last section so the loop can work.\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      let text;\n      if (text = inputSections[sectionNum].split(\" \").length === 2) {\n        text = text.join(\" \");\n        if (text.toLowerCase() === \"works cited\") {\n          sectionWorksCited = sectionNum;\n        }\n      }\n    }\n    if (sectionWorksCited === undefined) {\n      sectionWorksCited = inputSections.length;\n      addDocumentError(\"Please include a 'Works Cited' page at the end of your document.\", sectionWorksCited, inputSections.length - 1);\n    }\n    findMla(startParsingIndex, inputSections, sectionWorksCited);\n\n    /* Check for MLA Works Cited page!*/\n    if (sectionWorksCited < inputSections.length) {\n      findMlaWorksCited(sectionWorksCited, inputSections, inputSections.length);\n    }\n\n    /* Check that citations alone are valid */\n\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n\n    // for (let i = 0; i < dataEntriesList.length; i ++) {\n    //   let quoteKey = dataEntriesList[i];\n    //   console.log(quoteKey);\n    // }\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(documentErrorList);\n    console.log(\"\\nEND\\n\\n\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 534,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Quote","CitationError","DocumentError","App","documentErrorList","dataEntriesList","citationsErrorList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","stripQuotations","quote","includes","charCodeAt","substring","length","replace","addCitationError","citation","secIndex","index","errorMessage","hasCitationInQuote","i","quoteToCheck","getQuote","quoteObject","getQuoteObject","citationToCheck","getCitation","citationErrors","getCitationErrors","undefined","push","setCitationErrors","citationObject","addCitation","citationStr","setCitation","setCitationIndex","setCitationSection","setCitationError","citationHasErrors","getCitationObject","console","log","splice","addQuote","quoteErrors","getQuoteErrors","setQuoteErrors","setQuoteIndex","setQuoteSection","addQuoteError","unshift","addDocumentError","documentErrorObject","removeMlaDecimal","word","chars","split","result","slice","findMlaBlockCitation","wordsInSection","join","startedCitationIndex","findMlaCitations","finalWord","findMla","startingIndex","inputSections","sectionWorksCited","currentSection","containsQuoteInSection","hasQuoteError","containsQuote","error","wordsInQuote","wordsinSectionLength","containsFinalQuote","pop","containsCitation","blockCitation","findMlaWorksCited","totalNumberSections","decimalIndex","indexOf","checkMlaHandler","e","preventDefault","inputText","document","getElementById","value","startParsingIndex","sectionNum","text","toLowerCase","root","innerHTML"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\nimport {Quote} from './models/Quote.js';\nimport {CitationError} from './models/CitationError.js';\nimport {DocumentError} from './models/DocumentError.js';\n\nfunction App() {\n  \n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n  \n  function stripQuotations(quote) {\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length -1))) {\n      quote = quote.substring(0, (quote.length -1));\n    }\n    quote.replace(\"\\\"\", \"\");\n    \n    return quote;\n  }\n  \n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        \n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        \n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n          \n        } else {\n          citationErrors.push(errorMessage);\n          \n        }\n        \n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (!hasCitationInQuote) {\n      let citationObject;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          \n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n    \n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n        \n      }\n      \n      citationsErrorList.push(citationObject);\n    }\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        \n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n          quoteObject.setCitationIndex(index);\n          quoteObject.setCitationSection(secIndex);\n          \n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        \n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) { // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) { // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      \n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n    \n  }\n  \n  function getCitationObject(citation) {\n    let citationObject;\n    \n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      \n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  \n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        \n        break;\n      }\n    }\n    return quoteObject;\n  }\n  \n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        \n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        \n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      \n      quoteObject.setQuoteErrors(quoteErrors);\n      quoteObject.setQuoteIndex(index);\n      quoteObject.setQuoteSection(secIndex);\n    }\n    \n    dataEntriesList.push(quoteObject);\n  }\n  \n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    \n    let quoteObject = getQuoteObject(quote);\n    \n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    \n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    \n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    \n    dataEntriesList.unshift(quoteObject);\n    console.log(\"Error pushed into quote\");\n  }\n  \n  function addDocumentError(errorMessage, secIndex, index) {\n    let documentErrorObject = new DocumentError(errorMessage, secIndex, index);\n    documentErrorList.push(documentErrorObject);\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  \n  function findMlaBlockCitation(wordsInSection, secIndex) {\n    \n    if (wordsInSection.join(\" \").wordsInSection.includes(\")\")) { // Checks if the section contains a parenthesis. Possible block citation!\n      console.log(wordsInSection);\n      let citation = [];\n      let quote = [];\n    \n      /* Going backwards in this section! :) */\n      for (let i = 0; i < (wordsInSection -1); i++) {\n        let startedCitationIndex = i;\n        \n        while (true) {\n          i++;\n          let word = wordsInSection[i];\n          \n          citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n          \n          if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n            addQuote(quote.join(\" \"), secIndex, i);\n            addCitation(quote.join(\" \"), citation.join(\" \"), secIndex, i);\n            \n          } else if (!citation[0].includes(\"(\")) {\n            quote.push(word);\n          } else if (citation[0].includes(\"(\")) {\n            citation.push(word);\n          }\n        }\n      }\n    }\n    \n  }\n  \n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    \n    if (!word.includes(\"(\") && (citation === undefined)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [];\n      \n    } else if (word.includes(\"(\") && (startedCitationIndex === i)) { // If citation is right after quote.\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n      \n    } else {\n      citation.push(word);\n    }\n    \n    return [citation.join(\" \")];\n  }\n  \n  function findMla(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n      let hasQuoteError = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        // console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length -1;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            \n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that you missed one before the citation?\";\n              wordsInQuote.pop();\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            } else if (i === wordsinSectionLength) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            }\n          }\n          \n          quote = wordsInQuote.join(\" \");\n          \n          if (containsQuote) {\n            addQuote(quote, secIndex, i);\n          }\n          \n          if (error !== undefined) { // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          \n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n            \n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n              containsCitation = true;\n              break;\n            } else if ((i === wordsinSectionLength) && containsQuote) { // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          \n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          \n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation, secIndex, i);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n          } else {\n            addDocumentError(\"Maybe add a warning here? There was not a citation in this paragraph\", secIndex, i);\n          }\n          \n          /* Add Citation error if there is one!*/\n          \n        }\n      }\n      \n      if (!containsQuoteInSection && !hasQuoteError) { // If the section does not contain a quote or quote errors. Could it be a block citation?\n        let blockCitation = findMlaBlockCitation(wordsInSection, secIndex);\n        if (!blockCitation) {\n          addDocumentError(\"No citation exists for this paragraph!\", secIndex, 0);\n        }\n      }\n    }\n  }\n  \n  function findMlaWorksCited(sectionWorksCited, inputSections, totalNumberSections) {\n    \n    for (let secIndex = sectionWorksCited; secIndex < totalNumberSections; secIndex++) {\n      let wordsInSection = inputSections[secIndex];\n      \n      let decimalIndex = wordsInSection.indexOf(\".\");\n      console.log(decimalIndex);\n      \n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      addDocumentError(\"Make sure that the first 5 lines in your document contain your name, your teacher's name, \" +\n      \"your class name, and the current date. Line 5 should contain your paper title\", 0, 0);\n    } else if (startParsingIndex > 6) {\n      addDocumentError(\"There are too many header/title lines before introduction of paper. \" +\n      \"Consider removing empty lines between the title and headers of the document!\");\n    }\n    \n    let sectionWorksCited; // Give the section works cited the last section so the loop can work.\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      let text;\n      if (text = inputSections[sectionNum].split(\" \").length === 2) {\n        text = text.join(\" \");\n        if (text.toLowerCase() === \"works cited\") {\n          sectionWorksCited = sectionNum;\n        }\n      }\n    }\n    if (sectionWorksCited === undefined) {\n      sectionWorksCited = inputSections.length;\n      addDocumentError(\"Please include a 'Works Cited' page at the end of your document.\", sectionWorksCited, inputSections.length -1);\n    }\n    \n    findMla(startParsingIndex, inputSections, sectionWorksCited);\n    \n    /* Check for MLA Works Cited page!*/\n    if (sectionWorksCited < inputSections.length) {\n      findMlaWorksCited(sectionWorksCited, inputSections, inputSections.length);\n    }\n    \n    /* Check that citations alone are valid */\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n    \n    \n    // for (let i = 0; i < dataEntriesList.length; i ++) {\n    //   let quoteKey = dataEntriesList[i];\n    //   console.log(quoteKey);\n    // }\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(documentErrorList);\n    console.log(\"\\nEND\\n\\n\");\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}