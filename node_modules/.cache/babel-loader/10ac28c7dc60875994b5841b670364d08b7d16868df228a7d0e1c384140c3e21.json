{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let quotes = [];\n  const firstDoubleQuote_CharVal = 8220;\n  const lastDoubleQuote_CharVal = 8221;\n  function findQuotes(startingIndex, inputSections, sectionWorksCited) {\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      const inputWords = inputSections[secIndex].split(\" \");\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < inputWords.length; i++) {\n        let word = inputWords[i];\n        // console.log(word);\n\n        if (word.charCodeAt(0) === firstDoubleQuote_CharVal) {\n          // First quoted word found, now find the last.\n          console.log(\"Checking: \" + word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = inputWords[i];\n            const containsFinalQuote = word.charCodeAt(word.length - 1) === lastDoubleQuote_CharVal;\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              console.log(\"Correct word! It was: \" + word);\n              break;\n            }\n          }\n          quotes.push(wordsInQuote.join(\" \"));\n\n          // Get the citing of the quote after the quotation marks.\n          // while (true) {\n          //   i++;\n          //   word = inputWords[i];\n\n          //   // Check if the next word is the citing.\n          //   if (word.includes(\"(\")) {\n          //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n          //   }\n\n          // }\n        }\n      }\n    }\n\n    console.log(quotes);\n  }\n  function checkTextHandler(e) {\n    e.preventDefault();\n    const inputText = document.getElementById(\"inputText\").value;\n    console.log(inputText);\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    console.log(\"Starting section: \" + (startParsingIndex + 1));\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 5) {\n      console.log(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited;\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = inputSections[sectionNum];\n        console.log(\"Possible Works Cited page on section \" + (sectionNum + 1) + \"?\");\n      }\n    }\n    findQuotes(startParsingIndex, inputSections, sectionWorksCited);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkTextHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","quotes","firstDoubleQuote_CharVal","lastDoubleQuote_CharVal","findQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","inputWords","split","i","length","word","charCodeAt","console","log","wordsInQuote","push","containsFinalQuote","join","checkTextHandler","e","preventDefault","inputText","document","getElementById","value","undefined","startParsingIndex","sectionNum"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n    \n  let quotes = [];\n  const firstDoubleQuote_CharVal = 8220;\n  const lastDoubleQuote_CharVal = 8221;\n  \n  function findQuotes(startingIndex, inputSections, sectionWorksCited) {\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      const inputWords = inputSections[secIndex].split(\" \");\n    \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < inputWords.length; i++) {\n        let word = inputWords[i];\n        // console.log(word);\n        \n        if (word.charCodeAt(0) === firstDoubleQuote_CharVal) { // First quoted word found, now find the last.\n          console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = inputWords[i];\n            const containsFinalQuote = (word.charCodeAt(word.length -1) === lastDoubleQuote_CharVal);\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              console.log(\"Correct word! It was: \" +word);\n              break;\n            }\n          }\n          \n          quotes.push(wordsInQuote.join(\" \"));\n          \n          // Get the citing of the quote after the quotation marks.\n          // while (true) {\n          //   i++;\n          //   word = inputWords[i];\n            \n          //   // Check if the next word is the citing.\n          //   if (word.includes(\"(\")) {\n          //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n              \n          //   }\n            \n          // }\n        \n        }\n      }\n    }\n    console.log(quotes);\n  }\n  \n  function checkTextHandler(e) {\n    e.preventDefault();\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    console.log(\"Starting section: \" +(startParsingIndex+1));\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 5) {\n      console.log(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited;\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = inputSections[sectionNum];\n        console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findQuotes(startParsingIndex, inputSections, sectionWorksCited);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkTextHandler}>Check Text</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}