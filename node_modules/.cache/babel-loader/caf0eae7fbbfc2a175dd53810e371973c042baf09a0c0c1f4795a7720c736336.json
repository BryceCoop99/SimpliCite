{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let quotes = [];\n  const firstDoubleQuote_CharVal = 8220;\n  const lastDoubleQuote_CharVal = 8221;\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    console.log(startingIndex + \" \" + inputSections + \" \" + sectionWorksCited);\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      console.log(\"Section index: \" + secIndex);\n      const inputWords = inputSections[secIndex].split(\" \");\n      console.log(inputWords);\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < inputWords.length; i++) {\n        let word = inputWords[i];\n        // console.log(word);\n\n        if (word.charCodeAt(0) === firstDoubleQuote_CharVal) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = inputWords[i];\n            const containsFinalQuote = word.charCodeAt(word.length - 1) === lastDoubleQuote_CharVal;\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            }\n          }\n          quotes.push(wordsInQuote.join(\" \"));\n          let citation = [];\n          let startCitationIndex = i;\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = inputWords[i];\n            console.log(word);\n            if (!word.includes(\"(\") && startCitationIndex == i) {\n              // If beginning of citation and doesn't include open parenthesis.\n              console.log(\"Citation does not come right after quote\");\n              // Do more...\n            } else if (word.includes(\"(\")) {\n              // If citation is right after quote.\n              word.replace(/[{(}]/g, ''); //Replaces start parenthesis with empty.\n              console.log(word);\n              if (word.includes(\")\")) {\n                // If word is also end of citation too.\n                word.replace(/[{)}]/g, '');\n                console.log(word);\n                citation.push(word);\n                continue;\n              }\n              citation.push(word);\n            } else if (word.includes(\")\")) {\n              // If this is the end of the citation.\n              word.replace(/[{)}]/g, '');\n              console.log(word);\n              citation.push(word);\n              continue;\n            } else {\n              console.log(word);\n              citation.push(word);\n            }\n          }\n\n          // If citing doesn't come right after quote, check if it's later in the same section.\n          // while (true) {\n          //   i++;\n          //   word = inputWords[i];\n\n          //   // Check if the next word is the citing.\n          //   if (word.includes(\"(\")) {\n\n          //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n          //   }\n\n          // }\n        }\n      }\n    }\n\n    console.log(quotes);\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    const inputText = document.getElementById(\"inputText\").value;\n    console.log(inputText);\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    console.log(\"Starting section: \" + (startParsingIndex + 1));\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 5) {\n      console.log(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited;\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","quotes","firstDoubleQuote_CharVal","lastDoubleQuote_CharVal","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","console","log","secIndex","inputWords","split","i","length","word","charCodeAt","wordsInQuote","push","containsFinalQuote","join","citation","startCitationIndex","includes","replace","checkMlaHandler","e","preventDefault","inputText","document","getElementById","value","undefined","startParsingIndex","sectionNum"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n    \n  let quotes = [];\n  const firstDoubleQuote_CharVal = 8220;\n  const lastDoubleQuote_CharVal = 8221;\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      console.log(\"Section index: \" +secIndex);\n      const inputWords = inputSections[secIndex].split(\" \");\n      console.log(inputWords);\n    \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < inputWords.length; i++) {\n        let word = inputWords[i];\n        // console.log(word);\n        \n        if (word.charCodeAt(0) === firstDoubleQuote_CharVal) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = inputWords[i];\n            const containsFinalQuote = (word.charCodeAt(word.length -1) === lastDoubleQuote_CharVal);\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            }\n          }\n          \n          quotes.push(wordsInQuote.join(\" \"));\n          \n          let citation = [];\n          let startCitationIndex = i;\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = inputWords[i];\n            console.log(word);\n            \n            if (!word.includes(\"(\") && (startCitationIndex == i)) { // If beginning of citation and doesn't include open parenthesis.\n              console.log(\"Citation does not come right after quote\");\n              // Do more...\n              \n            } else if (word.includes(\"(\")) { // If citation is right after quote.\n              word.replace(/[{(}]/g, ''); //Replaces start parenthesis with empty.\n              console.log(word);\n              \n              if (word.includes(\")\")) { // If word is also end of citation too.\n                word.replace(/[{)}]/g, '');\n                console.log(word);\n                citation.push(word);\n                continue;\n              }\n              citation.push(word);\n            } else if (word.includes(\")\")) { // If this is the end of the citation.\n              word.replace(/[{)}]/g, '');\n              console.log(word);\n              citation.push(word);\n              continue;\n            } else {\n              console.log(word);\n              citation.push(word);\n            }\n          }\n          \n          // If citing doesn't come right after quote, check if it's later in the same section.\n          // while (true) {\n          //   i++;\n          //   word = inputWords[i];\n            \n          //   // Check if the next word is the citing.\n          //   if (word.includes(\"(\")) {\n              \n              \n          //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n              \n          //   }\n            \n          // }\n        \n        }\n      }\n    }\n    console.log(quotes);\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    console.log(\"Starting section: \" +(startParsingIndex+1));\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 5) {\n      console.log(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited;\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}