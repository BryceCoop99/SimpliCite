{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  function checkTextHandler(e) {\n    e.preventDefault();\n    const firstDoubleQuote_CharVal = 8220;\n    const lastDoubleQuote_CharVal = 8221;\n    const inputText = document.getElementById(\"inputText\").value;\n    console.log(inputText);\n    const inputWords = inputText.split(\" \");\n    let quotes = [];\n    for (let i = 0; i < inputWords.length; i++) {\n      let word = inputWords[i];\n      console.log(word);\n      // console.log(word + \" \" +charCode);\n\n      if (word.charCodeAt(0) === firstDoubleQuote_CharVal) {\n        // First quoted word found, now find the last.\n        console.log(\"Checking: \" + word);\n        let wordsInQuote = [];\n        wordsInQuote.push(word);\n        while (true) {\n          // Checking word with ending quotation marks!\n          i++;\n          word = inputWords[i];\n          const containsFinalQuote = word.charCodeAt(word.length - 1) === lastDoubleQuote_CharVal;\n          wordsInQuote.push(word);\n          if (containsFinalQuote) {\n            console.log(\"Correct word! It was: \" + word);\n            break;\n          }\n        }\n\n        // Get the format of the quote after the quotation marks.\n        while (true) {}\n        quotes.push(wordsInQuote.join(\" \"));\n      }\n    }\n    console.log(quotes);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkTextHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","checkTextHandler","e","preventDefault","firstDoubleQuote_CharVal","lastDoubleQuote_CharVal","inputText","document","getElementById","value","console","log","inputWords","split","quotes","i","length","word","charCodeAt","wordsInQuote","push","containsFinalQuote","join"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n  \n  function checkTextHandler(e) {\n    e.preventDefault();\n    const firstDoubleQuote_CharVal = 8220;\n    const lastDoubleQuote_CharVal = 8221;\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    console.log(inputText);\n    const inputWords = inputText.split(\" \");\n    \n    let quotes = [];\n    for (let i = 0; i < inputWords.length; i++) {\n      let word = inputWords[i];\n      console.log(word);\n      // console.log(word + \" \" +charCode);\n      \n      if (word.charCodeAt(0) === firstDoubleQuote_CharVal) { // First quoted word found, now find the last.\n        console.log(\"Checking: \" +word);\n        let wordsInQuote = [];\n        wordsInQuote.push(word);\n        \n        while (true) { // Checking word with ending quotation marks!\n          i++;\n          word = inputWords[i];\n          const containsFinalQuote = (word.charCodeAt(word.length -1) === lastDoubleQuote_CharVal);\n          wordsInQuote.push(word);\n          \n          if (containsFinalQuote) {\n            console.log(\"Correct word! It was: \" +word);\n            break;\n          }\n        }\n        \n        // Get the format of the quote after the quotation marks.\n        while (true) {\n          \n        }\n        \n        quotes.push(wordsInQuote.join(\" \"));\n      }\n    }\n    console.log(quotes);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkTextHandler}>Check Text</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAAC;AAEnB,SAASA,GAAG,GAAG;EAEb,SAASC,gBAAgB,CAACC,CAAC,EAAE;IAC3BA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAMC,wBAAwB,GAAG,IAAI;IACrC,MAAMC,uBAAuB,GAAG,IAAI;IAEpC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK;IAC5DC,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;IACtB,MAAMM,UAAU,GAAGN,SAAS,CAACO,KAAK,CAAC,GAAG,CAAC;IAEvC,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,IAAIE,IAAI,GAAGL,UAAU,CAACG,CAAC,CAAC;MACxBL,OAAO,CAACC,GAAG,CAACM,IAAI,CAAC;MACjB;;MAEA,IAAIA,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKd,wBAAwB,EAAE;QAAE;QACrDM,OAAO,CAACC,GAAG,CAAC,YAAY,GAAEM,IAAI,CAAC;QAC/B,IAAIE,YAAY,GAAG,EAAE;QACrBA,YAAY,CAACC,IAAI,CAACH,IAAI,CAAC;QAEvB,OAAO,IAAI,EAAE;UAAE;UACbF,CAAC,EAAE;UACHE,IAAI,GAAGL,UAAU,CAACG,CAAC,CAAC;UACpB,MAAMM,kBAAkB,GAAIJ,IAAI,CAACC,UAAU,CAACD,IAAI,CAACD,MAAM,GAAE,CAAC,CAAC,KAAKX,uBAAwB;UACxFc,YAAY,CAACC,IAAI,CAACH,IAAI,CAAC;UAEvB,IAAII,kBAAkB,EAAE;YACtBX,OAAO,CAACC,GAAG,CAAC,wBAAwB,GAAEM,IAAI,CAAC;YAC3C;UACF;QACF;;QAEA;QACA,OAAO,IAAI,EAAE,CAEb;QAEAH,MAAM,CAACM,IAAI,CAACD,YAAY,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC;MACrC;IACF;IACAZ,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC;EACrB;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAK,SAAS,EAAC,UAAU;MAAA,wBACvB;QAAU,EAAE,EAAC,WAAW;QAAC,SAAS,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAE,eAChD;QAAQ,OAAO,EAAEb,gBAAiB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB;IAAA;MAAA;MAAA;MAAA;IAAA;EAClD;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,KArDQD,GAAG;AAuDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}