{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  /* {Quote: [[Citation][Errors]], ...}*/\n  /** \n  {Quote: [[Citation][Errors]], ...}\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let globalQuote;\n  let globalError;\n  let citations;\n  let citation; // HMmm....\n  let documentErrors;\n  let quotesList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation \n\n  function addCitation(quote, citation) {\n    console.log(\"Adding citation to array\");\n    if (quote in quotesList) {\n      const values = quotesList.quote;\n      values[0].push(citation);\n      console.log(values);\n      quotesList.quote = values;\n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n    console.log(\"Quotes List: \" + JSON.stringify(quotesList));\n  }\n  function addQuote(quote) {\n    console.log(\"Adding quote to array!\");\n    quote.strip(\"\\\"\");\n    if (quote in quotesList) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      const errorArray = [];\n      const citationArray = [];\n      const values = [];\n      values.push(citationArray);\n      values.push(errorArray);\n      console.log(\"Quote to add: \" + quote);\n      quotesList[quote] = values;\n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" + JSON.stringify(quotesList));\n  }\n  function addError(errorHeader) {\n    console.log(\"Adding error to array!\");\n    if (errorHeader.includes(\"addQuoteError\")) {\n      if (globalQuote in quotesList) {// If the quote is already in the quotesList objects, add it!\n      } else {\n        // Intialize it instead and then add it!\n        const errorArray = [globalError];\n        console.log(errorArray);\n        const citationArray = [];\n        console.log(citationArray);\n        const values = [];\n        values.push(citationArray);\n        values.push(errorArray);\n        console.log(values);\n        quotesList.globalQuote = values;\n      }\n    } else if (errorHeader.includes(\"addCitationError\")) {}\n    for (let [key, value] in Object.entries(quotesList)) {\n      console.log(\"Key: \" + key + \" Value: \" + value);\n    }\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      // Else, keep the word!\n      return word;\n    }\n  }\n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    addQuote(wordsInQuote.join(\" \"));\n  }\n  function findMlaBlockCitation(wordsInSection) {\n    if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n      // Checks if last word contains ending parenthesis. Possible block citation!\n\n      /* Going backwards in this section! :) */\n      for (let j = wordsInSection.length - 1; j > 0; j--) {\n        let word = wordsInSection[j];\n        if (word.includes(\"(\")) {\n          // If has opening paren, then citation exists!\n          console.log(\"Block section!\");\n          citation.unshift(word);\n          addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n          return true;\n        }\n        citation.unshift(word);\n      }\n    }\n    return false;\n  }\n\n  /* */\n  function findMlaCitations(word, startedCitationIndex, i) {\n    if (!word.includes(\"(\") && startedCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      // console.log(\"Citation does not come right after quote\");\n      return false;\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\")) {\n      // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    return false;\n  }\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection);\n      let containsQuote;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        containsQuote = false;\n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              globalError = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === wordsInSection[wordsInSection - 1]) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              globalError = \"Missing quotation marks!\";\n              break;\n            }\n          }\n          if (containsQuotationError) {\n            // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            globalQuote = wordsInQuote.join(\" \");\n            addQuote(globalQuote);\n            addError();\n            quotesList[globalQuote] = [globalError];\n          } else {\n            globalQuote = wordsInQuote.join(\" \");\n            addQuote(globalQuote);\n            quotesList[globalQuote] = [globalError];\n          }\n          let startedCitationIndex = i;\n          let containsCitation = false;\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            if (word === undefined) {\n              // Break if this is the end of the word in the section.\n              break;\n            }\n            const foundCitation = findMlaCitations(word, startedCitationIndex + 1, i);\n            if (foundCitation) {\n              // If citation was found\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === wordsInSection - 1) {\n              // If last word in section and no citation found, break...\n              console.log(\"No citation found for quote...\"); // ERROR!\n              break;\n            }\n          }\n          if (containsCitation) {\n            addCitation(globalQuote, citation.join(\" \"));\n            console.log(\"Citations: \" + citations);\n          } else {\n            let mostRecentQuoteIndex = quotesList.length - 1;\n            console.log(\"Quote: \" + quotesList[mostRecentQuoteIndex] + \" does not have a citation\");\n          }\n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        }\n      }\n\n      if (!containsQuote) {\n        // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = findMlaBlockCitation(wordsInSection);\n        if (containsCitation) {\n          citations.push(citation);\n          console.log(\"Citations: \" + citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    citations = [];\n    citation = [];\n    documentErrors = {};\n    quotesList = {};\n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited = inputSections.length - 1; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","globalQuote","globalError","citations","citation","documentErrors","quotesList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","addCitation","quote","console","log","values","push","JSON","stringify","addQuote","strip","errorArray","citationArray","addError","errorHeader","includes","key","value","Object","entries","removeMlaDecimal","word","chars","split","length","result","slice","addMlaBlockQuote","wordsInSection","lastIndex","wordsInQuote","i","join","findMlaBlockCitation","j","unshift","findMlaCitations","startedCitationIndex","replace","finalWord","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","containsQuote","charCodeAt","containsQuotationError","containsFinalQuote","containsCitation","undefined","foundCitation","mostRecentQuoteIndex","checkMlaHandler","e","preventDefault","inputText","document","getElementById","startParsingIndex","sectionNum","root","innerHTML"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n  \n  /* {Quote: [[Citation][Errors]], ...}*/\n  /** \n  {Quote: [[Citation][Errors]], ...}\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let globalQuote;\n  let globalError;\n  let citations;\n  let citation; // HMmm....\n  let documentErrors;\n  let quotesList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation \n  \n  function addCitation(quote, citation) {\n    console.log(\"Adding citation to array\");\n    \n    if (quote in quotesList) {\n      const values = quotesList.quote;\n      values[0].push(citation);\n      console.log(values);\n      quotesList.quote = values;\n      \n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n    console.log(\"Quotes List: \" +JSON.stringify(quotesList));\n    \n  }\n  \n  function addQuote(quote) {\n    console.log(\"Adding quote to array!\");\n    quote.strip(\"\\\"\");\n    \n    if (quote in quotesList) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n      \n    } else {\n      const errorArray = [];\n      const citationArray = [];\n      const values = [];\n      values.push(citationArray);\n      values.push(errorArray);\n      console.log(\"Quote to add: \" +quote);\n      quotesList[quote] = values;\n      \n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" +JSON.stringify(quotesList));\n    \n  }\n  \n  function addError(errorHeader) {\n    console.log(\"Adding error to array!\");\n    if (errorHeader.includes(\"addQuoteError\")) {\n      if (globalQuote in quotesList) { // If the quote is already in the quotesList objects, add it!\n        \n      } else { // Intialize it instead and then add it!\n        const errorArray = [globalError];\n        console.log(errorArray);\n        const citationArray = [];\n        console.log(citationArray);\n        const values = [];\n        values.push(citationArray);\n        values.push(errorArray);\n        console.log(values);\n        quotesList.globalQuote = values;\n        \n      }\n      \n    } else if (errorHeader.includes(\"addCitationError\")) {\n      \n    }\n    \n    for (let [key, value] in Object.entries(quotesList)) {\n      console.log(\"Key: \" +key+ \" Value: \" +value);\n    }\n    \n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else { // Else, keep the word!\n      return word;\n    }\n  }\n  \n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    \n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    \n    addQuote(wordsInQuote.join(\" \"));\n  }\n  \n  function findMlaBlockCitation(wordsInSection) {\n    \n    if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n    \n      /* Going backwards in this section! :) */\n      for (let j = (wordsInSection.length -1); j > 0; j--) {\n        let word = wordsInSection[j];\n        \n        if (word.includes(\"(\")) { // If has opening paren, then citation exists!\n          console.log(\"Block section!\");\n          citation.unshift(word);\n          addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n          return true;\n        }\n        citation.unshift(word);\n      }\n    }\n    \n    return false;\n  }\n  \n  /* */\n  function findMlaCitations(word, startedCitationIndex, i) {\n    \n    if (!word.includes(\"(\") && (startedCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      // console.log(\"Citation does not come right after quote\");\n      return false;\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\")) { // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n      \n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    \n    return false;\n  }\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection);\n      let containsQuote;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        containsQuote = false;\n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              globalError = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === wordsInSection[(wordsInSection -1)]) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              globalError = \"Missing quotation marks!\";\n              break;\n            }\n          }\n          \n          if (containsQuotationError) { // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            globalQuote = wordsInQuote.join(\" \");\n            addQuote(globalQuote);\n            addError();\n            quotesList[globalQuote] = [globalError];\n          } else {\n            globalQuote = wordsInQuote.join(\" \");\n            addQuote(globalQuote);\n            quotesList[globalQuote] = [globalError];\n          }\n          \n          let startedCitationIndex = i;\n          let containsCitation = false;\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            if (word === undefined) { // Break if this is the end of the word in the section.\n              break;\n            }\n            \n            const foundCitation = findMlaCitations(word, startedCitationIndex+1, i);\n            \n            if (foundCitation) { // If citation was found\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === (wordsInSection -1)) { // If last word in section and no citation found, break...\n              console.log(\"No citation found for quote...\"); // ERROR!\n              break;\n            }\n            \n          }\n          \n          if (containsCitation) {\n            addCitation(globalQuote, citation.join(\" \"));\n            console.log(\"Citations: \" +citations);\n          } else {\n            let mostRecentQuoteIndex = (quotesList.length -1);\n            console.log(\"Quote: \" +quotesList[mostRecentQuoteIndex]+ \" does not have a citation\");\n          }\n          \n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        \n        }\n      }\n      \n      if (!containsQuote) { // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = findMlaBlockCitation(wordsInSection);\n        \n        if (containsCitation) {\n          citations.push(citation);\n          console.log(\"Citations: \" +citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    citations = [];\n    citation = [];\n    documentErrors = {};\n    quotesList = {};\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited = (inputSections.length -1); // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}