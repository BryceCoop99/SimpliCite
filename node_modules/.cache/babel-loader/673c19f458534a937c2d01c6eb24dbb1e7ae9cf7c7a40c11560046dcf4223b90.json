{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let quotes = [];\n  let citations = [];\n  let citation = []; // HMmm....\n  const firstDoubleQuote_CharVal = 8220;\n  const lastDoubleQuote_CharVal = 8221;\n\n  // Need Valid MLA inline-citation function\n\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      // Else, keep the word!\n      return word;\n    }\n  }\n  function findMlaCitations(word, startCitationIndex, i) {\n    if (!word.includes(\"(\") && startCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote\");\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\")) {\n      // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      if (word.includes(\",\")) {\n        // If the word has a comma, remove it\n        word.replace(/[,]/g, '');\n      }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    return false;\n  }\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      console.log(\"Section index: \" + secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection);\n\n      let containsQuote = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(word);\n\n        if (word.charCodeAt(0) === firstDoubleQuote_CharVal) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = word.charCodeAt(word.length - 1) === lastDoubleQuote_CharVal;\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              console.log(\"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\");\n            } else if (i === wordsInSection[wordsInSection - 1]) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              console.log(\"Missing quotation marks!\");\n            }\n          }\n          quotes.push(wordsInQuote.join(\" \"));\n          let startCitationIndex = i;\n          let containsCitation = false;\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            if (word === undefined) {\n              // Break if this is the end of the word in the section.\n              break;\n            }\n            const foundWord = findMlaCitations(word, startCitationIndex, i);\n            if (foundWord) {\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === wordsInSection - 1) {\n              console.log(\"No citation found for quote...\");\n              break;\n            }\n          }\n          if (containsCitation) {\n            citations.push(citation.join(\" \"));\n            console.log(\"Citations: \" + citations);\n          } else {\n            let mostRecentQuoteIndex = quotes.length - 1;\n            console.log(\"Quote: \" + quotes[mostRecentQuoteIndex] + \" does not have a citation\");\n          }\n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        } else if (wordsInSection[wordsInSection.length - 1].includes(\"(\") && wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n          // Or what if this whole section is a block citation?\n\n          /* Add all of the words as a quote block!*/\n          const allWords = wordsInSection.join(\" \");\n          quotes.push(allWords);\n          let startCitationIndex = i;\n\n          /* Pulling the citation */\n          break; // Break out of section\n        }\n      }\n\n      if (!containsQuote) {\n        // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = false;\n        if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n          // Checks if last word contains ending parenthesis. Possible block citation!\n\n          /* Going backwards in this section! :) */\n          for (let j = wordsInSection.length - 1; j > 0; j--) {\n            let word = wordsInSection[j];\n            if (word.includes(\"(\")) {\n              // If has opening paren, then citation exists!\n              console.log(\"Block section!\");\n              containsCitation = true;\n              citation.unshift(word);\n              break;\n            }\n            citation.unshift(word);\n          }\n        }\n        if (containsCitation) {\n          citations.add(citation);\n          console.log(\"Citations: \" + citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n      }\n    }\n\n    console.log(\"Quotes: \" + quotes);\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    // console.log(\"Number of sections: \" +inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 5) {\n      console.log(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited;\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","quotes","citations","citation","firstDoubleQuote_CharVal","lastDoubleQuote_CharVal","removeMlaDecimal","word","chars","split","length","result","slice","findMlaCitations","startCitationIndex","i","includes","console","log","replace","finalWord","push","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","wordsInSection","containsQuote","charCodeAt","wordsInQuote","containsFinalQuote","join","containsCitation","undefined","foundWord","mostRecentQuoteIndex","allWords","j","unshift","add","checkMlaHandler","e","preventDefault","inputText","document","getElementById","value","startParsingIndex","sectionNum"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n    \n  let quotes = [];\n  let citations = [];\n  let citation = []; // HMmm....\n  const firstDoubleQuote_CharVal = 8220;\n  const lastDoubleQuote_CharVal = 8221;\n  \n  // Need Valid MLA inline-citation function\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else { // Else, keep the word!\n      return word;\n    }\n  }\n  \n  function findMlaCitations(word, startCitationIndex, i) {\n    \n    if (!word.includes(\"(\") && (startCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote\");\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\")) { // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      if (word.includes(\",\")) { // If the word has a comma, remove it\n        word.replace(/[,]/g, '');\n      }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n      \n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    \n    return false;\n  }\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      console.log(\"Section index: \" +secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection);\n    \n      let containsQuote = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(word);\n        \n        if (word.charCodeAt(0) === firstDoubleQuote_CharVal) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = (word.charCodeAt(word.length -1) === lastDoubleQuote_CharVal);\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              console.log(\"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\");\n              \n            } else if (i === wordsInSection[(wordsInSection -1)]) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              console.log(\"Missing quotation marks!\");\n            }\n          }\n          \n          quotes.push(wordsInQuote.join(\" \"));\n          \n          let startCitationIndex = i;\n          let containsCitation = false;\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            if (word === undefined) { // Break if this is the end of the word in the section.\n              break;\n            }\n            \n            const foundWord = findMlaCitations(word, startCitationIndex, i);\n            \n            if (foundWord) {\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === (wordsInSection -1)) {\n              console.log(\"No citation found for quote...\");\n              break;\n            }\n            \n          }\n          \n          if (containsCitation) {\n            citations.push(citation.join(\" \"));\n            console.log(\"Citations: \" +citations);\n          } else {\n            let mostRecentQuoteIndex = (quotes.length -1);\n            console.log(\"Quote: \" +quotes[mostRecentQuoteIndex]+ \" does not have a citation\");\n          }\n          \n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        \n        } else if (wordsInSection[wordsInSection.length -1].includes(\"(\") && wordsInSection[wordsInSection.length -1].includes(\")\")) { // Or what if this whole section is a block citation?\n          \n          /* Add all of the words as a quote block!*/\n          const allWords = wordsInSection.join(\" \");\n          quotes.push(allWords);\n          \n          let startCitationIndex = i;\n          \n          \n          /* Pulling the citation */\n          break; // Break out of section\n        }\n      }\n      \n      if (!containsQuote) { // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = false;\n        \n        if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n        \n          /* Going backwards in this section! :) */\n          for (let j = (wordsInSection.length -1); j > 0; j--) {\n            let word = wordsInSection[j];\n            \n            if (word.includes(\"(\")) { // If has opening paren, then citation exists!\n              console.log(\"Block section!\");\n              containsCitation = true;\n              citation.unshift(word);\n              break;\n            }\n            citation.unshift(word);\n          }\n          \n        }\n        \n        if (containsCitation) {\n          citations.add(citation);\n          console.log(\"Citations: \" +citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n        \n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n      }\n    }\n    console.log(\"Quotes: \" +quotes);\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    // console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 5) {\n      console.log(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited;\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}