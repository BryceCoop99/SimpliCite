{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { Quote } from './models/Quote.js';\nimport { CitationError } from './models/CitationError.js';\nimport { DocumentError } from './models/DocumentError.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  // 33: !    46: .    59: ;    63: ?\n\n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n\n  function stripQuotations(quote) {\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length - 1))) {\n      quote = quote.substring(0, quote.length - 1);\n    }\n    quote.replace(\"\\\"\", \"\");\n    return quote;\n  }\n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n        } else {\n          citationErrors.push(errorMessage);\n        }\n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (!hasCitationInQuote) {\n      let citationObject;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n      }\n      citationsErrorList.push(citationObject);\n    }\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n          quoteObject.setCitationIndex(index - citation.split(\" \").length);\n          quoteObject.setCitationSection(secIndex);\n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n  }\n  function getCitationObject(citation) {\n    let citationObject;\n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        break;\n      }\n    }\n    return quoteObject;\n  }\n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      quoteObject.setQuoteErrors(quoteErrors);\n      quoteObject.setQuoteIndex(index - quote.split(\" \").length);\n      quoteObject.setQuoteSection(secIndex);\n    }\n    dataEntriesList.push(quoteObject);\n  }\n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    let quoteObject = getQuoteObject(quote);\n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    dataEntriesList.unshift(quoteObject);\n  }\n  function addDocumentError(errorMessage, secIndex, index) {\n    let documentErrorObject = new DocumentError(errorMessage, secIndex, index);\n    documentErrorList.push(documentErrorObject);\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  function validateCitation(wordsInSection, citation) {\n    // DO NOT disable the comment below...\n    // eslint-disable-next-line\n    let sentences = wordsInSection.join(\" \").match(/[^\\.!\\?]+[\\.!\\?]+/g);\n    let sentencesWithQuotationCitation = [];\n    console.log(\"Citation to check: \" + citation);\n    for (let sentenceIndex = 0; sentenceIndex < wordsInSection.length; sentenceIndex++) {\n      let sentence = sentences[sentenceIndex];\n      let hasBeginningQuoteInSentence = false;\n      let hasEndingQuoteInSentence = false;\n      if (sentence === undefined) {\n        continue;\n      }\n      for (let i = 0; i < sentence.length; i++) {\n        let character = sentence[i];\n        if (!hasBeginningQuoteInSentence && firstDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasBeginningQuoteInSentence = true;\n        } else if (!hasEndingQuoteInSentence && lastDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasEndingQuoteInSentence = true;\n          break;\n        }\n      }\n      if (hasBeginningQuoteInSentence) {\n        sentencesWithQuotationCitation.push(sentence);\n        console.log(\"Has beginning quote! \" + sentencesWithQuotationCitation.join(\" \"));\n        if (hasEndingQuoteInSentence) {\n          // IF IT HAS ENDING QUOTATION MARKS, THE CITATION MUST EXIST AFTER QUOTE!\n          console.log(\"Quote found! \" + sentencesWithQuotationCitation.join(\" \"));\n          console.log(sentencesWithQuotationCitation.join(\" \").includes(citation));\n        }\n      }\n    }\n    return false;\n  }\n  function findMlaBlockCitation(wordsInSection, secIndex) {\n    if (wordsInSection.join(\" \").includes(\")\") && wordsInSection.join(\" \").includes(\"(\")) {\n      // Checks if the section contains a parenthesis. Possible block citation!\n      console.log(wordsInSection);\n      let citation = [];\n      let quote = [];\n      let i = 0;\n      let startedCitationIndex = 0;\n      while (true) {\n        let word = wordsInSection[i];\n        citation = findMlaCitations(word, startedCitationIndex, i, citation);\n        if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n          // If citation was found\n          addQuote(quote.join(\" \"), secIndex, i);\n          addCitation(quote.join(\" \"), citation.join(\" \"), secIndex, i);\n          return true;\n        } else if (!citation[0].includes(\"(\")) {\n          quote.push(word);\n        } else if (citation[0].includes(\"(\")) {\n          citation.push(word);\n        }\n        i++;\n      }\n    }\n    return false;\n  }\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    if (!word.includes(\"(\") && citation === undefined) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [];\n    } else if (word.includes(\"(\") && startedCitationIndex === i) {\n      // If citation is right after quote.\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n    } else {\n      citation.push(word);\n    }\n    return [citation.join(\" \")];\n  }\n  function findMla(startingIndex, inputSections, sectionWorksCited) {\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited - 1; secIndex++) {\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      if (wordsInSection.length < 2) {\n        // We don't want empty sections!\n        continue;\n      }\n      let containsQuoteInSection = false;\n      let containsCitationInSection = false;\n      let hasQuoteError = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        let containsQuote = false;\n        let quote;\n        let errors = [];\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length - 1;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              errors.push(\"Missing ending parenthesis. Is it possible that you missed one before the citation?\");\n              wordsInQuote.pop();\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            } else if (i === wordsinSectionLength) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              errors.push(\"Missing ending quotation marks!\");\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            }\n          }\n          quote = wordsInQuote.join(\" \");\n          let startedCitationIndex = i + 1;\n          let containsCitation = false;\n          let citation = [];\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            citation = findMlaCitations(word, startedCitationIndex, i, citation);\n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n              // If citation was found\n              containsCitationInSection = true;\n              containsCitation = true;\n              break;\n            } else if (i === wordsinSectionLength && containsQuote) {\n              // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          if (containsCitation && containsQuote) {\n            if (errors !== undefined) {\n              errors.forEach(error => {\n                addQuoteError(quote, error);\n              });\n            }\n            addQuote(quote, secIndex, i);\n            addCitation(quote, citation, secIndex, i);\n            // Validate citation\n            validateCitation(wordsInSection, citation);\n          } else if (containsCitation && !containsQuote) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n          } else if (!containsCitation && containsQuote) {\n            // Could be a quote from different paragraph? Idk...\n          }\n\n          //Repeat for multiple quotes/citations in paragraph.\n        }\n      }\n\n      if (!containsQuoteInSection && !hasQuoteError) {\n        // If the section does not contain a quote in section or quote errors. Could it be a block citation?\n        containsCitationInSection = findMlaBlockCitation(wordsInSection, secIndex);\n      }\n      if (containsQuoteInSection && !containsCitationInSection) {// This could possibly be a single cited paper!\n      }\n      if (!containsCitationInSection && !containsQuoteInSection) {\n        addDocumentError(\"No quote or citation exists for this paragraph!\", secIndex, 0);\n      }\n    }\n  }\n  function findMlaWorksCited(sectionWorksCited, inputSections, totalNumberSections) {\n    for (let secIndex = sectionWorksCited; secIndex < totalNumberSections; secIndex++) {\n      // let wordsInSection = inputSections[secIndex];\n\n      // let decimalIndex = wordsInSection.indexOf(\".\");\n      // console.log(decimalIndex);\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    const inputText = document.getElementById(\"inputText\").value;\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n\n    /* Parse the headers! */\n    let hasExtraLinesInHeaders = false;\n    let hasMissingHeaders = false;\n    let startParsingIndex = 0;\n    let inputHeaders = [];\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length < 1) {\n        hasExtraLinesInHeaders = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else if (inputSections[i].length > 15) {\n        hasMissingHeaders = true;\n        break;\n      } else {\n        inputHeaders.push(inputSections[i]);\n      }\n      if (inputHeaders !== undefined && inputHeaders.length === 4) {\n        break;\n      }\n    }\n\n    /* Input Headers handling!! */\n    if (inputHeaders === undefined) {\n      addDocumentError(\"This paper is empty\", 0, 0);\n      return;\n    } else if (inputHeaders.length < 4) {\n      addDocumentError(\"Missing headers! Headers must include: your name, your teacher's name, class name, and current date.\", 0, 0);\n    }\n    if (hasExtraLinesInHeaders) {\n      addDocumentError(\"Consider removing the extra lines between headers of your document.\", 0, 0);\n    }\n    if (hasMissingHeaders) {\n      addDocumentError(\"Header/Title is missing! Headers must include: your name, your teacher's name, class name, and current date.\" + \"If your title is over 15 words long, shorten it and click the Check Citation button again.\");\n    }\n\n    /* Parse up until the Title! */\n    let inputTitle;\n    let hasExtraLinesBeforeTitle = false;\n    for (let i = inputHeaders.length; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        hasExtraLinesBeforeTitle = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else {\n        inputTitle = inputSections[i];\n        startParsingIndex = i + 1;\n        break;\n      }\n    }\n\n    /* Title Handling */\n    if (inputTitle === undefined) {\n      addDocumentError(\"Please add more to your paper before checking!\", startParsingIndex - 1, 0);\n      return;\n    }\n    if (inputSections[startParsingIndex].length < 2 || hasExtraLinesBeforeTitle) {\n      addDocumentError(\"Consider removing the extra lines before and after the Title of your document.\");\n    }\n\n    /* Parse the extra lines after the Title! We don't want to use them :) */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      }\n    }\n\n    /* Removing any extra lines in the document.*/\n    let startOfPaperIndex;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      } else if (startOfPaperIndex === undefined && inputSections[i].split(\" \").length > 20) {\n        startOfPaperIndex = i;\n        break;\n      }\n    }\n    if (!startOfPaperIndex) {\n      addDocumentError(\"Please add more to your paper before checking!\", startParsingIndex - 1, 0);\n      return;\n    }\n    let sectionWorksCited;\n    /* Give the section works cited the last section so the loop can work. */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      let text = inputSections[i].split(\" \");\n      if (text.length === 2) {\n        text = text.join(\" \");\n        if (text.toLowerCase() === \"works cited\") {\n          sectionWorksCited = i;\n        }\n      }\n    }\n    if (sectionWorksCited === undefined) {\n      sectionWorksCited = inputSections.length;\n      addDocumentError(\"Please include a 'Works Cited' page at the end of your document.\", sectionWorksCited, inputSections.length - 1);\n    }\n    console.log(startOfPaperIndex, inputSections, sectionWorksCited);\n    findMla(startOfPaperIndex, inputSections, sectionWorksCited);\n\n    /* Check for MLA Works Cited page!*/\n    if (sectionWorksCited < inputSections.length) {\n      findMlaWorksCited(sectionWorksCited, inputSections, inputSections.length);\n    }\n\n    /* Check that citations alone are valid */\n\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n\n    // for (let i = 0; i < dataEntriesList.length; i ++) {\n    //   let quoteKey = dataEntriesList[i];\n    //   console.log(quoteKey);\n    // }\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(documentErrorList);\n    console.log(\"\\nEND\\n\\n\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 658,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Quote","CitationError","DocumentError","App","documentErrorList","dataEntriesList","citationsErrorList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","stripQuotations","quote","includes","charCodeAt","substring","length","replace","addCitationError","citation","secIndex","index","errorMessage","hasCitationInQuote","i","quoteToCheck","getQuote","quoteObject","getQuoteObject","citationToCheck","getCitation","citationErrors","getCitationErrors","undefined","push","setCitationErrors","citationObject","addCitation","citationStr","setCitation","setCitationIndex","split","setCitationSection","setCitationError","citationHasErrors","getCitationObject","console","log","splice","addQuote","quoteErrors","getQuoteErrors","setQuoteErrors","setQuoteIndex","setQuoteSection","addQuoteError","unshift","addDocumentError","documentErrorObject","removeMlaDecimal","word","chars","result","slice","validateCitation","wordsInSection","sentences","join","match","sentencesWithQuotationCitation","sentenceIndex","sentence","hasBeginningQuoteInSentence","hasEndingQuoteInSentence","character","findMlaBlockCitation","startedCitationIndex","findMlaCitations","finalWord","findMla","startingIndex","inputSections","sectionWorksCited","currentSection","containsQuoteInSection","containsCitationInSection","hasQuoteError","containsQuote","errors","wordsInQuote","wordsinSectionLength","containsFinalQuote","pop","containsCitation","forEach","error","findMlaWorksCited","totalNumberSections","checkMlaHandler","e","preventDefault","inputText","document","getElementById","value","hasExtraLinesInHeaders","hasMissingHeaders","startParsingIndex","inputHeaders","inputTitle","hasExtraLinesBeforeTitle","startOfPaperIndex","text","toLowerCase","root","innerHTML"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\nimport {Quote} from './models/Quote.js';\nimport {CitationError} from './models/CitationError.js';\nimport {DocumentError} from './models/DocumentError.js';\n\nfunction App() {\n  \n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  // 33: !    46: .    59: ;    63: ?\n  \n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n  \n  function stripQuotations(quote) {\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length -1))) {\n      quote = quote.substring(0, (quote.length -1));\n    }\n    quote.replace(\"\\\"\", \"\");\n    \n    return quote;\n  }\n  \n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        \n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        \n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n          \n        } else {\n          citationErrors.push(errorMessage);\n          \n        }\n        \n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (!hasCitationInQuote) {\n      let citationObject;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          \n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n    \n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n        \n      }\n      \n      citationsErrorList.push(citationObject);\n    }\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        \n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n          quoteObject.setCitationIndex(index - citation.split(\" \").length);\n          quoteObject.setCitationSection(secIndex);\n          \n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        \n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) { // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) { // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      \n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n    \n  }\n  \n  function getCitationObject(citation) {\n    let citationObject;\n    \n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      \n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  \n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        \n        break;\n      }\n    }\n    return quoteObject;\n  }\n  \n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        \n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        \n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      \n      quoteObject.setQuoteErrors(quoteErrors);\n      quoteObject.setQuoteIndex(index - quote.split(\" \").length);\n      quoteObject.setQuoteSection(secIndex);\n    }\n    \n    dataEntriesList.push(quoteObject);\n  }\n  \n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    \n    let quoteObject = getQuoteObject(quote);\n    \n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    \n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    \n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    \n    dataEntriesList.unshift(quoteObject);\n  }\n  \n  function addDocumentError(errorMessage, secIndex, index) {\n    let documentErrorObject = new DocumentError(errorMessage, secIndex, index);\n    documentErrorList.push(documentErrorObject);\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  \n  function validateCitation(wordsInSection, citation) {\n    // DO NOT disable the comment below...\n    // eslint-disable-next-line\n    let sentences = wordsInSection.join(\" \").match( /[^\\.!\\?]+[\\.!\\?]+/g );\n    \n    let sentencesWithQuotationCitation = [];\n    console.log(\"Citation to check: \" +citation);\n    \n    for (let sentenceIndex = 0; sentenceIndex < wordsInSection.length; sentenceIndex++) {\n      let sentence = sentences[sentenceIndex];\n      let hasBeginningQuoteInSentence = false;\n      let hasEndingQuoteInSentence = false;\n      \n      if (sentence === undefined) {\n        continue;\n      }\n      \n      for (let i = 0; i < sentence.length; i++) {\n        let character = sentence[i];\n        \n        if (!hasBeginningQuoteInSentence && firstDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasBeginningQuoteInSentence = true;\n          \n        } else if (!hasEndingQuoteInSentence && lastDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasEndingQuoteInSentence = true;\n          break;\n          \n        }\n        \n      }\n      \n      if (hasBeginningQuoteInSentence) {\n        sentencesWithQuotationCitation.push(sentence);\n        console.log(\"Has beginning quote! \" +sentencesWithQuotationCitation.join(\" \"));\n      \n        if (hasEndingQuoteInSentence) { // IF IT HAS ENDING QUOTATION MARKS, THE CITATION MUST EXIST AFTER QUOTE!\n          console.log(\"Quote found! \" +sentencesWithQuotationCitation.join(\" \"));\n          console.log(sentencesWithQuotationCitation.join(\" \").includes(citation));\n        }\n        \n        \n        \n      }\n      \n    }\n    return false;\n  }\n  \n  function findMlaBlockCitation(wordsInSection, secIndex) {\n    \n    if (wordsInSection.join(\" \").includes(\")\") && wordsInSection.join(\" \").includes(\"(\")) { // Checks if the section contains a parenthesis. Possible block citation!\n      console.log(wordsInSection);\n      let citation = [];\n      let quote = [];\n      let i = 0;\n      let startedCitationIndex = 0;\n    \n      while (true) {\n        let word = wordsInSection[i];\n        \n        citation = findMlaCitations(word, startedCitationIndex, i, citation);\n        \n        if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n          addQuote(quote.join(\" \"), secIndex, i);\n          addCitation(quote.join(\" \"), citation.join(\" \"), secIndex, i);\n          return true;\n          \n        } else if (!citation[0].includes(\"(\")) {\n          quote.push(word);\n        } else if (citation[0].includes(\"(\")) {\n          citation.push(word);\n        }\n        \n        i++;\n      }\n    }\n    return false;\n  }\n  \n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    \n    if (!word.includes(\"(\") && (citation === undefined)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [];\n      \n    } else if (word.includes(\"(\") && (startedCitationIndex === i)) { // If citation is right after quote.\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n      \n    } else {\n      citation.push(word);\n    }\n    \n    return [citation.join(\" \")];\n  }\n  \n  function findMla(startingIndex, inputSections, sectionWorksCited) {\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited-1; secIndex++) {\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      \n      if (wordsInSection.length < 2) { // We don't want empty sections!\n        continue;\n      }\n      \n      let containsQuoteInSection = false;\n      let containsCitationInSection = false;\n      let hasQuoteError = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        \n        let containsQuote = false;\n        let quote;\n        let errors = [];\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length -1;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            \n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              errors.push(\"Missing ending parenthesis. Is it possible that you missed one before the citation?\");\n              wordsInQuote.pop();\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            } else if (i === wordsinSectionLength) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              errors.push(\"Missing ending quotation marks!\");\n              hasQuoteError = true;\n              containsQuote = true;\n              break;\n            }\n          }\n          \n          quote = wordsInQuote.join(\" \");\n          \n          let startedCitationIndex = i+1;\n          let containsCitation = false;\n          let citation = [];\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            \n            citation = findMlaCitations(word, startedCitationIndex, i, citation);\n            \n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n              containsCitationInSection = true;\n              containsCitation = true;\n              break;\n            } else if ((i === wordsinSectionLength) && containsQuote) { // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          \n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          \n          if (containsCitation && containsQuote) {\n            \n            if (errors !== undefined) {\n              errors.forEach(error => {\n                addQuoteError(quote, error);\n              });\n            }\n            addQuote(quote, secIndex, i);\n            addCitation(quote, citation, secIndex, i);\n            // Validate citation\n            validateCitation(wordsInSection, citation);\n            \n          } else if (containsCitation && !containsQuote) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n            \n          } else if (!containsCitation && containsQuote) {\n            // Could be a quote from different paragraph? Idk...\n          }\n          \n          //Repeat for multiple quotes/citations in paragraph.\n        }\n      }\n    \n      if (!containsQuoteInSection && !hasQuoteError) { // If the section does not contain a quote in section or quote errors. Could it be a block citation?\n        containsCitationInSection = findMlaBlockCitation(wordsInSection, secIndex);\n      }\n      \n      if (containsQuoteInSection && !containsCitationInSection) { // This could possibly be a single cited paper!\n        \n      }\n      \n      if (!containsCitationInSection && !containsQuoteInSection) {\n        addDocumentError(\"No quote or citation exists for this paragraph!\", secIndex, 0);\n      }\n    }\n  }\n  \n  function findMlaWorksCited(sectionWorksCited, inputSections, totalNumberSections) {\n    \n    for (let secIndex = sectionWorksCited; secIndex < totalNumberSections; secIndex++) {\n      // let wordsInSection = inputSections[secIndex];\n      \n      // let decimalIndex = wordsInSection.indexOf(\".\");\n      // console.log(decimalIndex);\n      \n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n\n    /* Parse the headers! */\n    let hasExtraLinesInHeaders = false;\n    let hasMissingHeaders = false;\n    let startParsingIndex = 0;\n    let inputHeaders = [];\n    for (let i = 0; i < inputSections.length; i++) {\n      \n      if (inputSections[i].length < 1) {\n        hasExtraLinesInHeaders = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else if (inputSections[i].length > 15) {\n        hasMissingHeaders = true;\n        break;\n      } else {\n        inputHeaders.push(inputSections[i]);\n      }\n      \n      if (inputHeaders !== undefined && inputHeaders.length === 4) {\n        break;\n      }\n    }\n\n    /* Input Headers handling!! */\n    if (inputHeaders === undefined) {\n      addDocumentError(\"This paper is empty\", 0, 0);\n      return;\n    } else if (inputHeaders.length < 4) {\n      addDocumentError(\"Missing headers! Headers must include: your name, your teacher's name, class name, and current date.\", 0, 0);\n    }\n    if (hasExtraLinesInHeaders) {\n      addDocumentError(\"Consider removing the extra lines between headers of your document.\", 0, 0);\n    }\n    if (hasMissingHeaders) {\n      addDocumentError(\"Header/Title is missing! Headers must include: your name, your teacher's name, class name, and current date.\" +\n      \"If your title is over 15 words long, shorten it and click the Check Citation button again.\");\n    }\n    \n    /* Parse up until the Title! */\n    let inputTitle;\n    let hasExtraLinesBeforeTitle = false;\n    for (let i = inputHeaders.length; i < inputSections.length; i++) {\n      \n      if (inputSections[i].length < 2) {\n        hasExtraLinesBeforeTitle = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else {\n        inputTitle = inputSections[i];\n        startParsingIndex = i+1;\n        break;\n      }\n    }\n    \n    /* Title Handling */\n    if (inputTitle === undefined) {\n      addDocumentError(\"Please add more to your paper before checking!\", startParsingIndex-1, 0);\n      return;\n    }\n    if (inputSections[startParsingIndex].length < 2 || hasExtraLinesBeforeTitle) {\n      addDocumentError(\"Consider removing the extra lines before and after the Title of your document.\");\n    }\n    \n    /* Parse the extra lines after the Title! We don't want to use them :) */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      }\n    }\n    \n    /* Removing any extra lines in the document.*/\n    let startOfPaperIndex;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      } else if (startOfPaperIndex === undefined && inputSections[i].split(\" \").length > 20) {\n        startOfPaperIndex = i;\n        break;\n      }\n    }\n    \n    if (!startOfPaperIndex) {\n      addDocumentError(\"Please add more to your paper before checking!\", startParsingIndex-1, 0);\n      return;\n    }\n    \n    let sectionWorksCited; \n    /* Give the section works cited the last section so the loop can work. */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      let text = inputSections[i].split(\" \");\n      if (text.length === 2) {\n        text = text.join(\" \");\n        if (text.toLowerCase() === \"works cited\") {\n          sectionWorksCited = i;\n        }\n      }\n    }\n    \n    if (sectionWorksCited === undefined) {\n      sectionWorksCited = inputSections.length;\n      addDocumentError(\"Please include a 'Works Cited' page at the end of your document.\", sectionWorksCited, inputSections.length -1);\n    }\n    \n    console.log(startOfPaperIndex, inputSections, sectionWorksCited);\n    findMla(startOfPaperIndex, inputSections, sectionWorksCited);\n    \n    /* Check for MLA Works Cited page!*/\n    if (sectionWorksCited < inputSections.length) {\n      findMlaWorksCited(sectionWorksCited, inputSections, inputSections.length);\n    }\n    \n    /* Check that citations alone are valid */\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n    \n    \n    // for (let i = 0; i < dataEntriesList.length; i ++) {\n    //   let quoteKey = dataEntriesList[i];\n    //   console.log(quoteKey);\n    // }\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(documentErrorList);\n    console.log(\"\\nEND\\n\\n\");\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}