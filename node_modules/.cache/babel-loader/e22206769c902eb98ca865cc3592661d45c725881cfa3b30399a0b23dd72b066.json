{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  /* {Quote: [[Citation][Errors]], ...}*/\n  /** \n  {Quote: [[Citation][Errors]], ...}\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let quotes;\n  let citations;\n  let citation; // HMmm....\n  let documentErrors;\n  let quotesList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation function\n\n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    quotes.push(wordsInQuote.join(\" \"));\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      // Else, keep the word!\n      return word;\n    }\n  }\n\n  /* */\n  function findMlaCitations(word, startCitationIndex, i) {\n    if (!word.includes(\"(\") && startCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote\");\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\")) {\n      // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      if (word.includes(\",\")) {\n        // If the word has a comma, remove it\n        word.replace(/[,]/g, '');\n      }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    return false;\n  }\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      console.log(\"Section index: \" + secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection);\n\n      let containsQuote = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        console.log(firstDoubleQuote_CharValues.includes(word.charCodeAt(0)));\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0)) >= 0) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(0)) >= 0;\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              console.log(\"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\");\n            } else if (i === wordsInSection[wordsInSection - 1]) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              console.log(\"Missing quotation marks!\");\n            }\n          }\n          quotes.push(wordsInQuote.join(\" \"));\n          let startCitationIndex = i;\n          let containsCitation = false;\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            if (word === undefined) {\n              // Break if this is the end of the word in the section.\n              break;\n            }\n            const foundWord = findMlaCitations(word, startCitationIndex, i);\n            if (foundWord) {\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === wordsInSection - 1) {\n              console.log(\"No citation found for quote...\");\n              break;\n            }\n          }\n          if (containsCitation) {\n            citations.push(citation.join(\" \"));\n            console.log(\"Citations: \" + citations);\n          } else {\n            let mostRecentQuoteIndex = quotes.length - 1;\n            console.log(\"Quote: \" + quotes[mostRecentQuoteIndex] + \" does not have a citation\");\n          }\n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        }\n      }\n\n      if (!containsQuote) {\n        // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = false;\n        if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n          // Checks if last word contains ending parenthesis. Possible block citation!\n\n          /* Going backwards in this section! :) */\n          for (let j = wordsInSection.length - 1; j > 0; j--) {\n            let word = wordsInSection[j];\n            if (word.includes(\"(\")) {\n              // If has opening paren, then citation exists!\n              console.log(\"Block section!\");\n              containsCitation = true;\n              citation.unshift(word);\n              addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n              break;\n            }\n            citation.unshift(word);\n          }\n        }\n        if (containsCitation) {\n          citations.push(citation);\n          console.log(\"Citations: \" + citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n      }\n    }\n\n    console.log(\"Quotes: \" + quotes);\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    quotes = [];\n    citations = [];\n    citation = [];\n    documentErrors = {};\n    quotesList = {};\n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited = inputSections.length - 1; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    for (let i = 0; i < citations.length; i++) {\n      let citationText = document.createTextNode(citations[i]);\n      let quoteText = document.createTextNode(quotes[i]);\n      let quote = document.createElement(\"th\");\n      let citation = document.createElement(\"th\");\n      quote.appendChild(quoteText);\n      citation.appendChild(citationText);\n      let row = document.createElement(\"tr\");\n      row.appendChild(quote);\n      row.appendChild(citation);\n      root.appendChild(row);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","quotes","citations","citation","documentErrors","quotesList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","addMlaBlockQuote","wordsInSection","lastIndex","wordsInQuote","i","word","push","join","removeMlaDecimal","chars","split","length","result","slice","findMlaCitations","startCitationIndex","includes","console","log","replace","finalWord","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","containsQuote","charCodeAt","containsFinalQuote","containsCitation","undefined","foundWord","mostRecentQuoteIndex","j","unshift","checkMlaHandler","e","preventDefault","inputText","document","getElementById","value","startParsingIndex","sectionNum","root","innerHTML","citationText","createTextNode","quoteText","quote","createElement","appendChild","row"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n  \n  /* {Quote: [[Citation][Errors]], ...}*/\n  /** \n  {Quote: [[Citation][Errors]], ...}\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let quotes;\n  let citations;\n  let citation; // HMmm....\n  let documentErrors;\n  let quotesList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation function\n  \n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    \n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    \n    quotes.push(wordsInQuote.join(\" \"));\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else { // Else, keep the word!\n      return word;\n    }\n  }\n  \n  /* */\n  function findMlaCitations(word, startCitationIndex, i) {\n    \n    if (!word.includes(\"(\") && (startCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote\");\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\")) { // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      if (word.includes(\",\")) { // If the word has a comma, remove it\n        word.replace(/[,]/g, '');\n      }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n      \n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    \n    return false;\n  }\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      console.log(\"Section index: \" +secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection);\n    \n      let containsQuote = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        console.log(firstDoubleQuote_CharValues.includes(word.charCodeAt(0)));\n        \n        if ((firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) >= 0) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = ((lastDoubleQuote_CharValues.includes(word.charCodeAt(0))) >= 0);\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              console.log(\"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\");\n              \n            } else if (i === wordsInSection[(wordsInSection -1)]) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              console.log(\"Missing quotation marks!\");\n            }\n          }\n          \n          quotes.push(wordsInQuote.join(\" \"));\n          \n          let startCitationIndex = i;\n          let containsCitation = false;\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            if (word === undefined) { // Break if this is the end of the word in the section.\n              break;\n            }\n            \n            const foundWord = findMlaCitations(word, startCitationIndex, i);\n            \n            if (foundWord) {\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === (wordsInSection -1)) {\n              console.log(\"No citation found for quote...\");\n              break;\n            }\n            \n          }\n          \n          if (containsCitation) {\n            citations.push(citation.join(\" \"));\n            console.log(\"Citations: \" +citations);\n          } else {\n            let mostRecentQuoteIndex = (quotes.length -1);\n            console.log(\"Quote: \" +quotes[mostRecentQuoteIndex]+ \" does not have a citation\");\n          }\n          \n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        \n        }\n      }\n      \n      if (!containsQuote) { // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = false;\n        \n        if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n        \n          /* Going backwards in this section! :) */\n          for (let j = (wordsInSection.length -1); j > 0; j--) {\n            let word = wordsInSection[j];\n            \n            if (word.includes(\"(\")) { // If has opening paren, then citation exists!\n              console.log(\"Block section!\");\n              containsCitation = true;\n              citation.unshift(word);\n              addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n              break;\n            }\n            citation.unshift(word);\n          }\n          \n        }\n        \n        if (containsCitation) {\n          citations.push(citation);\n          console.log(\"Citations: \" +citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n        \n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n      }\n    }\n    console.log(\"Quotes: \" +quotes);\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    quotes = [];\n    citations = [];\n    citation = [];\n    documentErrors = {};\n    quotesList = {};\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited = (inputSections.length -1); // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    for (let i = 0; i < citations.length; i++) {\n      let citationText = document.createTextNode(citations[i]);\n      let quoteText = document.createTextNode(quotes[i]);\n      \n      let quote = document.createElement(\"th\");\n      let citation = document.createElement(\"th\");\n      quote.appendChild(quoteText);\n      citation.appendChild(citationText);\n      \n      let row = document.createElement(\"tr\");\n      row.appendChild(quote);\n      row.appendChild(citation);\n      \n      root.appendChild(row);\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}