{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { Quote } from './models/Quote.js';\nimport { CitationError } from './models/CitationError.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n\n  function stripQuotations(quote) {\n    if (quote.charCodeAt(0) === undefined) {\n      if (quote.charCodeAt(quote.length - 1) === undefined) {\n        return quote;\n      }\n      if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length - 1))) {\n        quote = quote.substring(0, quote.length - 1);\n      }\n      quote.replace(\"\\\"\", \"\");\n      return quote;\n    } else if (quote.charCodeAt(quote.length - 1) === undefined) {\n      if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n        quote = quote.substring(1);\n      }\n      quote.replace(\"\\\"\", \"\");\n      return quote;\n    }\n\n    // General Quotation Stripping\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length - 1))) {\n      quote = quote.substring(0, quote.length - 1);\n    }\n    quote.replace(\"\\\"\", \"\");\n    return quote;\n  }\n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n        } else {\n          citationErrors.push(errorMessage);\n        }\n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (!hasCitationInQuote) {\n      let citationObject;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n      }\n      citationsErrorList.push(citationObject);\n    }\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n  }\n  function getCitationObject(citation) {\n    let citationObject;\n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        break;\n      }\n    }\n    return quoteObject;\n  }\n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      quoteObject.setQuoteErrors(quoteErrors);\n    }\n    dataEntriesList.push(quoteObject);\n  }\n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    let quoteObject = getQuoteObject(quote);\n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    dataEntriesList.unshift(quoteObject);\n    console.log(\"Error pushed into quote\");\n  }\n  function addDocumentError(errorMessage) {\n    documentErrorList.push(errorMessage);\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  function findMlaBlockCitation(wordsInSection) {\n    if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n      // Checks if last word contains ending parenthesis. Possible block citation!\n      let citation = [];\n      let quote = [];\n\n      /* Going backwards in this section! :) */\n      for (let i = 0; i < wordsInSection - 1; i++) {\n        let startedCitationIndex = i;\n        while (true) {\n          i++;\n          let word = wordsInSection[i];\n          citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n          if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n            // If citation was found\n            addQuote(quote.join(\" \"));\n            addCitation(quote.join(\" \"), citation.join(\" \"));\n          } else if (!citation[0].includes(\"(\")) {\n            quote.push(word);\n          } else if (citation[0].includes(\"(\")) {\n            citation.push(word);\n          }\n        }\n      }\n    }\n  }\n\n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    if (!word.includes(\"(\") && startedCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [citation.join(\" \")];\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\") && startedCitationIndex === i) {\n      // If citation is right after quote.\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n    } else {\n      citation.push(word);\n    }\n    return [citation.join(\" \")];\n  }\n  function findMla(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        // console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length - 1;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              break;\n            } else if (i === wordsinSectionLength) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              break;\n            }\n          }\n          if (containsQuote) {\n            quote = wordsInQuote.join(\" \");\n            addQuote(quote, secIndex, i);\n          }\n          if (error !== undefined) {\n            // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n              // If citation was found\n              containsCitation = true;\n              break;\n            } else if (i === wordsinSectionLength && containsQuote) {\n              // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation, secIndex, i);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n            console.log(\"Citation errors\");\n            console.log(documentErrorList);\n          } else {\n            console.log(\"Maybe add a warning here? There was not a citation in this paragraph\");\n          }\n\n          /* Add Citation error if there is one!*/\n        }\n      }\n\n      if (!containsQuoteInSection) {\n        // If the section does not contain a quote. Could it be a block citation?\n        findMlaBlockCitation(wordsInSection);\n      }\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    const inputText = document.getElementById(\"inputText\").value;\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      addDocumentError(\"First 5 lines consists of: Your name, your teacher's name, your class name, and the date\");\n    } else if (startParsingIndex > 6) {\n      addDocumentError(\"There are too many header/title lines before introduction of paper. Consider removing empty lines between the title and headers of the document!\");\n    }\n    let sectionWorksCited; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      console.log(\"Section: \" + sectionNum + \" \" + inputSections[sectionNum].split(\" \").length);\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n      }\n    }\n    if (sectionWorksCited === undefined) {\n      addDocumentError(\"Please include a Works Cited page at the end of your document.\");\n      sectionWorksCited = inputSections.length;\n    }\n    findMla(startParsingIndex, inputSections, sectionWorksCited);\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n\n    // for (let i = 0; i < dataEntriesList.length; i ++) {\n    //   let quoteKey = dataEntriesList[i];\n    //   console.log(quoteKey);\n    // }\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(documentErrorList);\n    console.log(\"\\nEND\\n\\n\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 533,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Quote","CitationError","App","documentErrorList","dataEntriesList","citationsErrorList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","stripQuotations","quote","charCodeAt","undefined","length","includes","substring","replace","addCitationError","citation","secIndex","index","errorMessage","hasCitationInQuote","i","quoteToCheck","getQuote","quoteObject","getQuoteObject","citationToCheck","getCitation","citationErrors","getCitationErrors","push","setCitationErrors","citationObject","addCitation","citationStr","setCitation","setCitationError","citationHasErrors","getCitationObject","console","log","splice","addQuote","quoteErrors","getQuoteErrors","setQuoteErrors","addQuoteError","unshift","addDocumentError","removeMlaDecimal","word","chars","split","result","slice","findMlaBlockCitation","wordsInSection","startedCitationIndex","findMlaCitations","join","finalWord","findMla","startingIndex","inputSections","sectionWorksCited","currentSection","containsQuoteInSection","containsQuote","error","wordsInQuote","wordsinSectionLength","containsFinalQuote","containsCitation","checkMlaHandler","e","preventDefault","inputText","document","getElementById","value","startParsingIndex","sectionNum","root","innerHTML"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\nimport {Quote} from './models/Quote.js';\nimport {CitationError} from './models/CitationError.js';\n\nfunction App() {\n  \n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n  \n  function stripQuotations(quote) {\n    if (quote.charCodeAt(0) === undefined) {\n      \n      if (quote.charCodeAt(quote.length -1) === undefined) {\n        return quote;\n      }\n      if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length -1))) {\n        quote = quote.substring(0, (quote.length -1));\n      }\n      quote.replace(\"\\\"\", \"\");\n      return quote;\n      \n    } else if (quote.charCodeAt(quote.length -1) === undefined) {\n      if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n        quote = quote.substring(1);\n      }\n      quote.replace(\"\\\"\", \"\");\n      return quote;\n    }\n    \n    \n    // General Quotation Stripping\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length -1))) {\n      quote = quote.substring(0, (quote.length -1));\n    }\n    quote.replace(\"\\\"\", \"\");\n    \n    return quote;\n  }\n  \n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        \n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        \n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n          \n        } else {\n          citationErrors.push(errorMessage);\n          \n        }\n        \n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (!hasCitationInQuote) {\n      let citationObject;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          \n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n    \n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n        \n      }\n      \n      citationsErrorList.push(citationObject);\n    }\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        \n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        \n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) { // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) { // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      \n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n    \n  }\n  \n  function getCitationObject(citation) {\n    let citationObject;\n    \n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      \n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  \n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        \n        break;\n      }\n    }\n    return quoteObject;\n  }\n  \n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        \n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        \n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      \n      quoteObject.setQuoteErrors(quoteErrors);\n    }\n    \n    dataEntriesList.push(quoteObject);\n  }\n  \n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    \n    let quoteObject = getQuoteObject(quote);\n    \n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    \n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    \n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    \n    dataEntriesList.unshift(quoteObject);\n    console.log(\"Error pushed into quote\");\n  }\n  \n  function addDocumentError(errorMessage) {\n    documentErrorList.push(errorMessage);\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  \n  function findMlaBlockCitation(wordsInSection) {\n    \n    if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n      let citation = [];\n      let quote = [];\n    \n      /* Going backwards in this section! :) */\n      for (let i = 0; i < (wordsInSection -1); i++) {\n        let startedCitationIndex = i;\n        \n        while (true) {\n          i++;\n          let word = wordsInSection[i];\n          \n          citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n          \n          if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n            addQuote(quote.join(\" \"));\n            addCitation(quote.join(\" \"), citation.join(\" \"));\n            \n          } else if (!citation[0].includes(\"(\")) {\n            quote.push(word);\n          } else if (citation[0].includes(\"(\")) {\n            citation.push(word);\n          }\n        }\n      }\n    }\n    \n  }\n  \n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    \n    if (!word.includes(\"(\") && (startedCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [citation.join(\" \")];\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\") && (startedCitationIndex === i)) { // If citation is right after quote.\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n      \n    } else {\n      citation.push(word);\n    }\n    \n    return [citation.join(\" \")];\n  }\n  \n  function findMla(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        // console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length -1;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            \n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              break;\n            } else if (i === wordsinSectionLength) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              break;\n            }\n          }\n          \n          if (containsQuote) {\n            quote = wordsInQuote.join(\" \");\n            addQuote(quote, secIndex, i);\n          }\n          \n          if (error !== undefined) { // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          \n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n            \n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n              containsCitation = true;\n              break;\n            } else if ((i === wordsinSectionLength) && containsQuote) { // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          \n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          \n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation, secIndex, i);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n            console.log(\"Citation errors\");\n            console.log(documentErrorList);\n          } else {\n            console.log(\"Maybe add a warning here? There was not a citation in this paragraph\");\n          }\n          \n          /* Add Citation error if there is one!*/\n          \n        }\n      }\n      \n      if (!containsQuoteInSection) { // If the section does not contain a quote. Could it be a block citation?\n        findMlaBlockCitation(wordsInSection);\n      }\n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      addDocumentError(\"First 5 lines consists of: Your name, your teacher's name, your class name, and the date\");\n    } else if (startParsingIndex > 6) {\n      addDocumentError(\"There are too many header/title lines before introduction of paper. Consider removing empty lines between the title and headers of the document!\");\n    }\n    \n    let sectionWorksCited; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      console.log(\"Section: \"+ sectionNum +\" \" +inputSections[sectionNum].split(\" \").length);\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n      }\n    }\n    if (sectionWorksCited === undefined) {\n      addDocumentError(\"Please include a Works Cited page at the end of your document.\");\n      sectionWorksCited = inputSections.length;\n    }\n    \n    findMla(startParsingIndex, inputSections, sectionWorksCited);\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n    \n    \n    // for (let i = 0; i < dataEntriesList.length; i ++) {\n    //   let quoteKey = dataEntriesList[i];\n    //   console.log(quoteKey);\n    // }\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(documentErrorList);\n    console.log(\"\\nEND\\n\\n\");\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}