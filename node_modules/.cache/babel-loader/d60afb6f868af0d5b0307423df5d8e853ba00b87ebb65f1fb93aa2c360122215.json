{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { Quote } from './models/Quote.js';\nimport { CitationError } from './models/CitationError.js';\nimport { DocumentError } from './models/DocumentError.js';\nimport { MLAWorksCitation } from './models/MLAWorksCitation.js';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  let worksCitedList;\n  // let inputSections;\n  let startOfPaperIndex;\n  let sectionWorksCited;\n  const [selectedFormat, updateSelectedFormat] = useState(\"MLA\");\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  // 33: !    46: .    59: ;    63: ?\n\n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n\n  function selectedFormatHandler(e) {\n    e.preventDefault();\n    let value = document.getElementById(\"selectedFormat\").value;\n    if (value !== selectedFormat) {\n      if (value === \"MLA\") {\n        updateSelectedFormat(\"APA\");\n      } else {\n        updateSelectedFormat(\"MLA\");\n      }\n    }\n    console.log(selectedFormat);\n  }\n  function inputTextOnChange(e) {\n    e.preventDefault();\n    const responseImportant = document.getElementById(\"responseImportant\");\n    if (responseImportant.innerHTML === \"Copy and paste your text here\") {\n      responseImportant.innerHTML = \"Click Check Paper!\";\n      responseImportant.style.backgroundColor = \"#ff006a\";\n    }\n  }\n  function inputTextChangeOnBlur(e) {\n    e.preventDefault();\n    let inputText = document.getElementById(\"inputText\").value;\n    if (inputText.length === 0) {\n      const responseImportant = document.getElementById(\"responseImportant\");\n      responseImportant.innerHTML = \"Copy and paste your text here\";\n      responseImportant.style.backgroundColor = \"transparent\";\n    }\n  }\n  function inputTextChangeOnFocus(e) {\n    e.preventDefault();\n    const responseImportant = document.getElementById(\"responseImportant\");\n    if (responseImportant.innerHTML !== \"See results below\") {\n      responseImportant.style.backgroundColor = \"#ff006a\";\n    }\n  }\n  function clearTextArea(e) {\n    e.preventDefault();\n    document.getElementById(\"inputText\").value = \"\";\n    const responseImportant = document.getElementById(\"responseImportant\");\n    responseImportant.innerHTML = \"Copy and paste your text here\";\n    responseImportant.style.backgroundColor = \"transparent\";\n  }\n  function stripQuotations(quote) {\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length - 1))) {\n      quote = quote.substring(0, quote.length - 1);\n    }\n    quote.replace(\"\\\"\", \"\");\n    return quote;\n  }\n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n        } else {\n          citationErrors.push(errorMessage);\n        }\n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (!hasCitationInQuote) {\n      let citationObject;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n        citationObject.setCitationIndex(index);\n        citationObject.setCitationSection(secIndex);\n      }\n      citationsErrorList.push(citationObject);\n    }\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n          quoteObject.setCitationIndex(index);\n          quoteObject.setCitationSection(secIndex);\n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      for (let i = 0; i < citationsErrorList.length; i++) {\n        // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n  }\n  function getCitationObject(citation) {\n    let citationObject;\n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        break;\n      }\n    }\n    return quoteObject;\n  }\n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      quoteObject.setQuoteErrors(quoteErrors);\n      quoteObject.setQuoteIndex(index);\n      quoteObject.setQuoteSection(secIndex);\n    }\n    dataEntriesList.push(quoteObject);\n  }\n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    let quoteObject = getQuoteObject(quote);\n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    dataEntriesList.unshift(quoteObject);\n  }\n  function addDocumentError(errorMessage, secIndex, index) {\n    let documentErrorObject = new DocumentError(errorMessage, secIndex, index);\n    documentErrorList.push(documentErrorObject);\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  function capitalizeFirstLetter(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n\n  /** This should check that an author's name appears in here! Author must come from Works Cited list*/\n  function validateCitationInText(wordsInSection, citation) {\n    // DO NOT disable the comment below...\n    // eslint-disable-next-line\n    let sentences = wordsInSection.join(\" \").match(/[^\\.!\\?]+[\\.!\\?]+/g);\n    let sentencesWithQuotationCitation = [];\n    // console.log(\"Citation to check: \" +citation);\n\n    for (let sentenceIndex = 0; sentenceIndex < wordsInSection.length; sentenceIndex++) {\n      let sentence = sentences[sentenceIndex];\n      let hasBeginningQuoteInSentence = false;\n      let hasEndingQuoteInSentence = false;\n      if (sentence === undefined) {\n        continue;\n      }\n      for (let i = 0; i < sentence.length; i++) {\n        let character = sentence[i];\n        if (!hasBeginningQuoteInSentence && firstDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasBeginningQuoteInSentence = true;\n        } else if (!hasEndingQuoteInSentence && lastDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasEndingQuoteInSentence = true;\n          // console.log(\"Sentence: \"+sentence);\n          break;\n        }\n      }\n      if (hasBeginningQuoteInSentence) {\n        sentencesWithQuotationCitation.push(sentence);\n        // console.log(\"Has beginning quote! \" +sentencesWithQuotationCitation.join(\" \"));\n        // console.log(sentencesWithQuotationCitation.join(\" \").includes(citation));\n\n        if (hasEndingQuoteInSentence) {\n          // IF IT HAS ENDING QUOTATION MARKS, THE CITATION MUST EXIST AFTER QUOTE!\n          // console.log(\"Quote found! \" +sentencesWithQuotationCitation.join(\" \"));\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function findMlaBlockCitation(wordsInSection, secIndex) {\n    if (wordsInSection.join(\" \").includes(\")\") && wordsInSection.join(\" \").includes(\"(\")) {\n      // Checks if the section contains a parenthesis. Possible block citation!\n      console.log(wordsInSection);\n      let citation = [];\n      let quote = [];\n      let i = 0;\n      let startedCitationIndex = 0;\n      while (true) {\n        let word = wordsInSection[i];\n        citation = findMlaCitations(word, startedCitationIndex, i, citation);\n        if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n          // If citation was found\n          addQuote(quote.join(\" \"), secIndex, 0);\n          addCitation(quote.join(\" \"), citation.join(\" \"), secIndex, i);\n          return true;\n        } else if (!citation[0].includes(\"(\")) {\n          quote.push(word);\n        } else if (citation[0].includes(\"(\")) {\n          citation.push(word);\n        }\n        i++;\n      }\n    }\n    return false;\n  }\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    if (!word.includes(\"(\") && citation === undefined) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [];\n    } else if (word.includes(\"(\") && startedCitationIndex === i) {\n      // If citation is right after quote.\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n    } else {\n      citation.push(word);\n    }\n    return [citation.join(\" \")];\n  }\n\n  /**\n   * Finds all of the quotes in MLA Format and adds them to the Quotes List! \n   */\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      if (wordsInSection.length < 2) {\n        // We don't want empty sections!\n        continue;\n      }\n      let containsQuoteInSection = false;\n      let containsCitationInSection = false;\n      let hasQuoteErrorInSection = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        let containsQuote = false;\n        let quote;\n        let errors = [];\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length - 1;\n          let quoteIndex = i;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            word = removeMlaDecimal(word);\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              errors.push(\"Missing ending parenthesis. Is it possible that you missed one before the citation?\");\n              wordsInQuote.pop();\n              hasQuoteErrorInSection = true;\n              containsQuote = true;\n              break;\n            } else if (i === wordsinSectionLength) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              errors.push(\"Missing ending quotation marks!\");\n              hasQuoteErrorInSection = true;\n              containsQuote = true;\n              break;\n            }\n          }\n          quote = wordsInQuote.join(\" \");\n          let startedCitationIndex = i + 1;\n          let containsCitation = false;\n          let citation = [];\n          let citationIndex = 0;\n          let citationIndexFound = false;\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n              // Could mean that this quote could be associated with the next quote?\n              i--;\n              break;\n            }\n            citation = findMlaCitations(word, startedCitationIndex, i, citation);\n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n              // If citation was found\n              containsCitationInSection = true;\n              containsCitation = true;\n              break;\n            } else if (!citationIndexFound && citation[0].includes(\"(\")) {\n              citationIndexFound = true;\n              citationIndex = i;\n            } else if (i === wordsInSection.length - 1) {\n              break;\n            }\n          }\n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          if (containsCitation && containsQuote) {\n            addQuote(quote, secIndex, quoteIndex);\n            addCitation(quote, citation, secIndex, citationIndex);\n\n            // Validate citation\n            let citationValid = validateCitationInText(wordsInSection, citation);\n            if (!citationValid) {}\n          } else if (containsCitation && !containsQuote) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n          } else if (!containsCitation && containsQuote) {\n            // Could be a quote from different paragraph? Idk...\n            addQuote(quote, secIndex, quoteIndex);\n            addQuoteError(quote, \"This quote does not have an in-text citation\");\n          }\n          if (containsQuote && errors !== undefined) {\n            errors.forEach(error => {\n              addQuoteError(quote, error);\n            });\n          }\n\n          //Repeat for multiple quotes/citations in paragraph.\n        }\n      }\n\n      if (!containsQuoteInSection && !hasQuoteErrorInSection) {\n        // If the section does not contain a quote in section or quote errors. Could it be a block citation?\n        containsCitationInSection = findMlaBlockCitation(wordsInSection, secIndex);\n      }\n      if (containsQuoteInSection && !containsCitationInSection) {// This could possibly be a single cited paper!\n      }\n      if (!containsCitationInSection && !containsQuoteInSection) {\n        addDocumentError(\"No quote or citation exists for this paragraph!\", secIndex, 0);\n      }\n    }\n  }\n\n  /**\n  * Author, Title of source, Title of container, Other contributors\n  * Version, Number, Publisher, Publication date, Location.\n  */\n  function findMlaWorksCited(sectionWorksCited, inputSections, totalNumberSections) {\n    for (let secIndex = sectionWorksCited; secIndex < totalNumberSections; secIndex++) {\n      let mlaWorksCitedObj = new MLAWorksCitation(inputSections[secIndex], secIndex);\n      // DO NOT disable the comment below...\n      // eslint-disable-next-line\n      let sentences = inputSections[secIndex].match(/[^\\.!\\?]+[\\.!\\?]+/g);\n      // for (let sentIndex = 0; sentIndex < sentences.length)\n      let sentenceIndex = 0;\n      if (sentences === null) {\n        // This is null instead of undefined because of the funky .match() function above.\n        addDocumentError(\"Add your works citations at the end of the paper under the Works Cited section!\", secIndex, 0);\n        return;\n      }\n\n      /* Find Author and Author Acronym! */\n      let authorSentence = sentences[sentenceIndex].trim();\n      authorSentence = authorSentence.replace('.', \"\");\n\n      // console.log(authorSentence);\n      // console.log(secIndex);\n      // if (authorSentence)\n      let authorNames = authorSentence.split(\",\");\n      let authorErrors = [];\n      if (authorNames === undefined) {\n        addDocumentError(\"Add your works citations at the end of the paper under the Works Cited section!\", secIndex, 0);\n        return;\n      }\n      mlaWorksCitedObj.setAuthorIndex(sentenceIndex);\n\n      // console.log(authorNames);\n      if (authorNames.length === 1) {\n        mlaWorksCitedObj.setAuthor(authorNames[0]);\n        authorErrors.push(\"Author name must include first and last name in the following format\" + \" 'Last Name, First Name (Optional: Middle Initial/Name).'\");\n      } else if (authorNames.length > 2) {\n        mlaWorksCitedObj.setAuthor(authorSentence);\n        authorErrors.push(\"Make sure to use the following format for the Author's name:\" + \" 'Last Name, First Name (Optional: Middle Initial/Name).'\");\n      } else {\n        let lastNames = authorNames[0].trim().split(\" \");\n        let firstNames = authorNames[1].trim().split(\" \");\n        let fullname = [];\n        firstNames.forEach(word => {\n          fullname.push(capitalizeFirstLetter(word.toLowerCase()));\n        });\n        lastNames.forEach(word => {\n          fullname.push(capitalizeFirstLetter(word.toLowerCase()));\n        });\n        mlaWorksCitedObj.setAuthor(fullname.join(\" \"));\n        let authorAcronym = [];\n        firstNames.forEach(word => {\n          authorAcronym.push(word.charAt(0));\n        });\n        lastNames.forEach(word => {\n          authorAcronym.push(word.charAt(0));\n        });\n        mlaWorksCitedObj.setAuthorAcronym(authorAcronym.join(\"\"));\n        // console.log(authorAcronym);\n        // console.log(firstNames);\n        // console.log(lastNames);\n      }\n\n      if (authorErrors !== undefined) {\n        let errors = mlaWorksCitedObj.getAuthorErrors();\n        if (errors === undefined) {\n          errors = [];\n        }\n        authorErrors.forEach(error => {\n          errors.push(error);\n        });\n        mlaWorksCitedObj.setAuthorErrors(errors);\n      }\n      sentenceIndex += 1;\n      /*   */\n\n      worksCitedList.push(mlaWorksCitedObj);\n    }\n    if (worksCitedList[0] === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function insertCommentIntoArray(array, index, commentType, comment) {\n    if (array.length < 2) {\n      array.push(index);\n      array.push(commentType);\n      array.push(comment);\n      return array;\n    }\n    for (let i = 0; i < array.length; i += 3) {\n      let indexToCheck = array[i];\n      if (index <= indexToCheck) {\n        array.splice(i, 0, comment);\n        array.splice(i, 0, commentType);\n        array.splice(i, 0, index);\n        return array;\n      }\n    }\n    array.push(index);\n    array.push(commentType);\n    array.push(comment);\n    return array;\n  }\n\n  /* Creates an array that holds indexes with errors/suggestions/correct statements for printing! */\n  function createSectionsArray(totalNumberOfSections) {\n    let sectionsArray = [];\n    for (let sectionIndex = 0; sectionIndex < totalNumberOfSections; sectionIndex++) {\n      let commentsArray = []; // The index & comment to the error!\n\n      /* Documents List! */\n      documentErrorList.forEach(documentErrorObj => {\n        if (documentErrorObj.getSection() === sectionIndex) {\n          commentsArray = insertCommentIntoArray(commentsArray, documentErrorObj.getIndex(), \"Document Error\", documentErrorObj.getError());\n        }\n      });\n\n      /* Quotes/Citations List! */\n      dataEntriesList.forEach(quoteObject => {\n        // Quotes \n        if (quoteObject.getQuoteSection() === sectionIndex) {\n          let errors = quoteObject.getQuoteErrors();\n          if (errors === undefined) {\n            // There should always be quote errors... for some reason :D\n            return;\n          }\n          if (errors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getQuoteIndex(), \"Valid Quotation\", \"Correct quote format!\");\n          } else {\n            for (let i = 0; i < errors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getQuoteIndex(), \"Quotation Error\", errors[i]);\n            }\n          }\n        }\n\n        // Citations\n        if (quoteObject.getCitationSection() !== undefined && quoteObject.getCitationSection() === sectionIndex) {\n          let errors = quoteObject.getCitationErrors();\n          if (errors === undefined || errors.length < 1) {\n            // If there aren't any errors\n            commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getCitationIndex(), \"Valid Citation\", \"VALID\");\n          } else {\n            for (let i = 0; i < errors.length; i++) {\n              // insert each error!\n              commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getCitationIndex(), \"Citation Error\", errors[i]);\n            }\n          }\n        }\n      });\n\n      /* Citation Errors List! */\n      citationsErrorList.forEach(citationError => {\n        if (citationError.getCitationIndex() === sectionIndex) {\n          let errors = citationError.getCitationErrors();\n          if (errors === undefined) {\n            console.log(\"SYSTEM ERROR: citation error must include error message.\");\n            return;\n          }\n          for (let i = 0; i < errors.length; i++) {\n            commentsArray = insertCommentIntoArray(commentsArray, citationError.getCitationIndex(), \"Citation Error\", errors[i]);\n          }\n        }\n      });\n\n      /* Works Cited List! */\n      worksCitedList.forEach(worksCitedObject => {\n        if (worksCitedObject.getSectionIndex() === sectionIndex) {\n          let authorErrors = worksCitedObject.getAuthorErrors();\n          let titleSourceErrors = worksCitedObject.getTitleSourceErrors();\n          let titleContainerErrors = worksCitedObject.getTitleContainerErrors();\n          let contributorsErrors = worksCitedObject.getContributorsErrors();\n          let versionErrors = worksCitedObject.getVersionErrors();\n          let publisherErrors = worksCitedObject.getPublisherErrors();\n          let publicationDateErrors = worksCitedObject.getPublicationDateErrors();\n          let locationDateErrors = worksCitedObject.getLocationErrors();\n          if (authorErrors === undefined || authorErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getAuthorIndex(), \"Valid Author\", \"VALID\");\n          } else {\n            for (let i = 0; i < authorErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getAuthorIndex(), \"Invalid Author\", authorErrors[i]);\n            }\n          }\n          if (titleSourceErrors === undefined || titleSourceErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleSourceIndex(), \"Valid Title Source\", \"VALID\");\n          } else {\n            for (let i = 0; i < titleSourceErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleSourceIndex(), \"Invalid Title Source\", titleSourceErrors[i]);\n            }\n          }\n          if (titleContainerErrors === undefined || titleContainerErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleContainerIndex(), \"Valid Title Container\", \"VALID\");\n          } else {\n            for (let i = 0; i < titleContainerErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleContainerIndex(), \"Invalid Title Container\", titleContainerErrors[i]);\n            }\n          }\n          if (contributorsErrors === undefined || contributorsErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getContributorsIndex(), \"Valid Contributors\", \"VALID\");\n          } else {\n            for (let i = 0; i < contributorsErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getContributorsIndex(), \"Invalid Contributors\", contributorsErrors[i]);\n            }\n          }\n          if (versionErrors === undefined || versionErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getVersionIndex(), \"Valid Version\", \"VALID\");\n          } else {\n            for (let i = 0; i < versionErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getVersionIndex(), \"Invalid Version\", versionErrors[i]);\n            }\n          }\n          if (publisherErrors === undefined || publisherErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublisherIndex(), \"Valid Publisher\", \"VALID\");\n          } else {\n            for (let i = 0; i < publisherErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublisherIndex(), \"Invalid Publisher\", publisherErrors[i]);\n            }\n          }\n          if (publicationDateErrors === undefined || publicationDateErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublicationDateIndex(), \"Valid Publication Date\", \"VALID\");\n          } else {\n            for (let i = 0; i < publicationDateErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublicationDateIndex(), \"Invalid Publication Date\", publicationDateErrors[i]);\n            }\n          }\n          if (locationDateErrors === undefined || locationDateErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getLocationIndex(), \"Valid Location\", \"VALID\");\n          } else {\n            for (let i = 0; i < locationDateErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getLocationIndex(), \"Invalid Location\", locationDateErrors[i]);\n            }\n          }\n        }\n      });\n      sectionsArray.push(commentsArray);\n    }\n    return sectionsArray;\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    worksCitedList = [];\n    const responseImportant = document.getElementById(\"responseImportant\");\n    responseImportant.innerHTML = \"\";\n    const inputText = document.getElementById(\"inputText\").value;\n    if (inputText.length > 0) {\n      responseImportant.style.backgroundColor = \"#FF006A\";\n      // responseImportant.style.color = \"#FFF\";\n    }\n\n    let inputSections = inputText.split(\"\\n\");\n    if (inputSections.length <= 1) {\n      if (inputSections[0].length > 1) {\n        responseImportant.innerHTML = \"Make sure you've copied your whole paper before checking! \" + \"Include the following headers: Full Name, Teacher, Class Name, Today's Date.\";\n        return;\n      }\n      responseImportant.innerHTML = \"Copy and paste your paper to start!\";\n      return;\n    }\n\n    /* Parse the headers! */\n    let hasExtraLinesInHeaders = false;\n    let hasMissingHeaders = false;\n    let startParsingIndex = 0;\n    let inputHeaders = [];\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length < 1) {\n        hasExtraLinesInHeaders = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else if (inputSections[i].length > 15) {\n        hasMissingHeaders = true;\n        break;\n      } else {\n        inputHeaders.push(inputSections[i]);\n      }\n      if (inputHeaders !== undefined && inputHeaders.length === 4) {\n        break;\n      }\n    }\n\n    /* Input Headers handling!! */\n    if (inputHeaders === undefined) {\n      responseImportant.innerHTML = \"his paper is empty\";\n      return;\n    } else if (inputHeaders.length < 4) {\n      addDocumentError(\"Missing headers! Headers must include: your name, your teacher's name, class name, and current date.\", 0, 0);\n    }\n    if (hasExtraLinesInHeaders) {\n      addDocumentError(\"Consider removing the extra lines between headers of your document.\", 0, 0);\n    }\n    if (hasMissingHeaders) {\n      addDocumentError(\"Header/Title is missing! Headers must include: your name, your teacher's name, class name, and current date.\" + \"If your title is over 15 words long, shorten it and click the Check Citation button again.\", 0, 0);\n    }\n\n    /* Parse up until the Title! */\n    let inputTitle;\n    let hasExtraLinesBeforeTitle = false;\n    for (let i = inputHeaders.length; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        hasExtraLinesBeforeTitle = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else {\n        inputTitle = inputSections[i];\n        startParsingIndex = i + 1;\n        break;\n      }\n    }\n\n    /* Title Handling */\n    if (inputTitle === undefined) {\n      responseImportant.innerHTML = \"Please add more to your paper before checking!\";\n      return;\n    }\n    if (inputSections[startParsingIndex].length < 2 || hasExtraLinesBeforeTitle) {\n      addDocumentError(\"Consider removing the extra lines before and after the Title of your document.\", startParsingIndex - 1, 0);\n    }\n\n    /* Parse the extra lines after the Title! We don't want to use them :) */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      }\n    }\n\n    /* Removing any extra lines in the document.*/\n    startOfPaperIndex = undefined;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      } else if (startOfPaperIndex === undefined && inputSections[i].split(\" \").length > 20) {\n        startOfPaperIndex = i;\n        break;\n      }\n    }\n    if (startOfPaperIndex === undefined) {\n      responseImportant.innerHTML = \"Please add more to your paper before checking!\";\n      return;\n    }\n    sectionWorksCited = undefined;\n    /* Give the section works cited the last section so the loop can work. */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      let text = inputSections[i].trim().split(\" \");\n      if (text.length === 2) {\n        text = text.join(\" \").toLowerCase();\n        if (text === \"works cited\" || text === \"references\" || text === \"bibliography\") {\n          sectionWorksCited = i;\n        }\n      }\n    }\n    if (sectionWorksCited === undefined) {\n      sectionWorksCited = inputSections.length;\n      responseImportant.innerHTML = \"Please include a works cited page at the end of your document. If your works cited page exists,\" + \" make sure to have a single line named 'Works Cited' before the citations\";\n      return;\n    }\n\n    /* Check for MLA Works Cited page and parse the works cited citations!*/\n    let hasWorksCitedCitations = false;\n    if (sectionWorksCited < inputSections.length) {\n      hasWorksCitedCitations = findMlaWorksCited(sectionWorksCited + 1, inputSections, inputSections.length);\n    }\n    if (!hasWorksCitedCitations) {\n      responseImportant.innerHTML = \"Add your source citations under your 'Works Cited' section at the end of the document.\";\n      return;\n    }\n    console.log(inputSections);\n    console.log(startOfPaperIndex, sectionWorksCited);\n\n    /* Now find the in-text quotes/citations inside the paper sections!*/\n    findMlaQuotes(startOfPaperIndex, inputSections, sectionWorksCited);\n\n    /* Check that citations alone are valid */\n\n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(worksCitedList);\n    console.log(documentErrorList);\n    const sectionArrayObject = createSectionsArray(inputSections.length);\n    console.log(sectionArrayObject);\n\n    /* Creating container for parent node */\n    const parent = document.getElementById(\"bottom-parent\");\n    parent.innerHTML = ''; // Clear previous results!\n    const resultsContainer = document.createElement(\"div\");\n    resultsContainer.classList.add(\"container-other\");\n\n    /* Creating side comment column nodes */\n    const leftColumnNode = document.createElement(\"div\");\n    leftColumnNode.classList.add(\"container-other\");\n    leftColumnNode.classList.add(\"left-column\");\n    const rightColumnNode = document.createElement(\"div\");\n    rightColumnNode.classList.add(\"container-other\");\n    rightColumnNode.classList.add(\"right-column\");\n\n    /* Creating results container so text nodes can be appended inside of the container */\n    const resultTitle = document.createElement(\"h1\");\n    const resultTitleText = document.createTextNode(\"Results\");\n    resultTitle.appendChild(resultTitleText);\n    resultsContainer.appendChild(resultTitle);\n    let commentNumber = 1;\n    /* Start creating the paper! parent -> resultsContainer -> text */\n    for (let secIndex = 0; secIndex < inputSections.length; secIndex++) {\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      const sectionNode = document.createElement(\"p\");\n      const sectionArrayComments = sectionArrayObject[secIndex];\n      const commentNumOfItems = sectionArrayComments.length;\n\n      // console.log(numComments);\n      // console.log(sectionArrayComments);\n      // console.log(wordsInSection.length);\n\n      if (secIndex >= startOfPaperIndex && secIndex < sectionWorksCited) {\n        // To tab paragraphs!\n        const tabNode = document.createTextNode(\"\\u00a0\\u00a0\\u00a0\\u00a0\");\n        sectionNode.appendChild(tabNode);\n      }\n      for (let i = 0; i < wordsInSection.length; i++) {\n        const word = wordsInSection[i];\n        // const spanNode = document.createElement(\"span\");\n        const wordNode = document.createTextNode(word);\n        for (let commentIndex = 0; commentIndex < commentNumOfItems; commentIndex += 3) {\n          if (i === sectionArrayComments[commentIndex]) {\n            // console.log(secIndex + \" \" + sectionArrayComments[commentIndex]);\n            const commentType = sectionArrayComments[commentIndex + 1];\n            const commentTypeLower = commentType.toLowerCase();\n            const commentNumberNode = document.createTextNode(commentNumber);\n            const numberElement = document.createElement(\"span\");\n            if (commentTypeLower.includes(\"error\") || commentTypeLower.includes(\"invalid\")) {\n              numberElement.classList.add(\"red-number\");\n            } else if (commentTypeLower.includes(\"valid\")) {\n              numberElement.classList.add(\"green-number\");\n            } else if (commentTypeLower.includes(\"suggestion\")) {\n              numberElement.classList.add(\"yellow-number\");\n            }\n            numberElement.appendChild(commentNumberNode);\n            sectionNode.appendChild(numberElement);\n\n            /** USE #2\n            * Create this or the textnodes/nodes from above will be placed in the Paper! \n            */\n            const containerHeader = document.createElement(\"div\");\n            containerHeader.classList.add(\"side-container-header\");\n            const commentNumberNode2 = document.createTextNode(commentNumber);\n            const numberElement2 = document.createElement(\"span\");\n            if (commentTypeLower.includes(\"error\") || commentTypeLower.includes(\"invalid\")) {\n              numberElement2.classList.add(\"red-number\");\n            } else if (commentTypeLower.includes(\"valid\")) {\n              numberElement2.classList.add(\"green-number\");\n            } else if (commentTypeLower.includes(\"suggestion\")) {\n              numberElement2.classList.add(\"yellow-number\");\n            }\n            numberElement2.appendChild(commentNumberNode2);\n\n            /* Comment Type Node */\n            const commentTypeTextNode = document.createTextNode(commentType);\n            const commentTypeElement = document.createElement(\"h3\");\n            commentTypeElement.append(commentTypeTextNode);\n\n            /* Comment Message Node */\n            const commentMessageText = sectionArrayComments[commentIndex + 2];\n            const commentMessageTextNode = document.createTextNode(commentMessageText);\n            const commentMessageNode = document.createElement(\"p\");\n            commentMessageNode.appendChild(commentMessageTextNode);\n\n            /* Comment Container Node */\n            const commentContainerNode = document.createElement(\"div\");\n            commentContainerNode.classList.add(\"side-container\");\n\n            /** Append comment number and type Comment Header div.\n            * Then append Comment Header div to Comment Container div.\n            */\n            containerHeader.appendChild(numberElement2);\n            containerHeader.appendChild(commentTypeElement);\n            commentContainerNode.appendChild(containerHeader);\n            commentContainerNode.appendChild(commentMessageNode);\n\n            /* If comment number is even, append it to right side. Else, left side.*/\n            if (commentNumber % 2 === 0) {\n              rightColumnNode.appendChild(commentContainerNode);\n            } else {\n              leftColumnNode.appendChild(commentContainerNode);\n            }\n            commentNumber += 1;\n          }\n        }\n        sectionNode.appendChild(wordNode);\n        const spaceNode = document.createTextNode(\" \");\n        sectionNode.appendChild(spaceNode);\n      }\n      resultsContainer.append(sectionNode);\n    }\n\n    // const results = document.createElement(\"div\");\n    // resultsContainer.appendChild(results);\n\n    /* Add the results container at the end! */\n    parent.appendChild(leftColumnNode);\n    parent.appendChild(resultsContainer);\n    parent.appendChild(rightColumnNode);\n    console.log(\"\\nEND\\n\\n\");\n    responseImportant.innerHTML = \"See results below\";\n    responseImportant.style.backgroundColor = \"#3CD604\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"parent\",\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header\",\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Citation Checker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"inputForm\",\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            onChange: inputTextOnChange,\n            onBlur: inputTextChangeOnBlur,\n            onFocus: inputTextChangeOnFocus,\n            id: \"inputText\",\n            type: \"text\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            id: \"responseImportant\",\n            children: \"Copy and paste your text here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: checkMlaHandler,\n            type: \"submit\",\n            value: \"Check Paper\",\n            className: \"btn btn-check\",\n            children: \"Check Paper\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: selectedFormatHandler,\n            id: \"selectedFormat\",\n            name: \"inputFormat\",\n            className: \"inputFormat\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"MLA\",\n              children: \"MLA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"APA\",\n              children: \"APA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1169,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearTextArea,\n            type: \"submit\",\n            value: \"Clear\",\n            className: \"btn btn-clear\",\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"bottom-parent\",\n      className: \"bottom-parent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1155,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"28ioQr7EyL9KR47R65hKX6rrYbg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Quote","CitationError","DocumentError","MLAWorksCitation","useState","App","documentErrorList","dataEntriesList","citationsErrorList","worksCitedList","startOfPaperIndex","sectionWorksCited","selectedFormat","updateSelectedFormat","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","selectedFormatHandler","e","preventDefault","value","document","getElementById","console","log","inputTextOnChange","responseImportant","innerHTML","style","backgroundColor","inputTextChangeOnBlur","inputText","length","inputTextChangeOnFocus","clearTextArea","stripQuotations","quote","includes","charCodeAt","substring","replace","addCitationError","citation","secIndex","index","errorMessage","hasCitationInQuote","i","quoteToCheck","getQuote","quoteObject","getQuoteObject","citationToCheck","getCitation","citationErrors","getCitationErrors","undefined","push","setCitationErrors","citationObject","setCitationIndex","setCitationSection","addCitation","citationStr","setCitation","setCitationError","citationHasErrors","getCitationObject","splice","addQuote","quoteErrors","getQuoteErrors","setQuoteErrors","setQuoteIndex","setQuoteSection","addQuoteError","unshift","addDocumentError","documentErrorObject","removeMlaDecimal","word","chars","split","result","slice","capitalizeFirstLetter","charAt","toUpperCase","validateCitationInText","wordsInSection","sentences","join","match","sentencesWithQuotationCitation","sentenceIndex","sentence","hasBeginningQuoteInSentence","hasEndingQuoteInSentence","character","findMlaBlockCitation","startedCitationIndex","findMlaCitations","finalWord","findMlaQuotes","startingIndex","inputSections","currentSection","containsQuoteInSection","containsCitationInSection","hasQuoteErrorInSection","containsQuote","errors","wordsInQuote","wordsinSectionLength","quoteIndex","containsFinalQuote","pop","containsCitation","citationIndex","citationIndexFound","citationValid","forEach","error","findMlaWorksCited","totalNumberSections","mlaWorksCitedObj","authorSentence","trim","authorNames","authorErrors","setAuthorIndex","setAuthor","lastNames","firstNames","fullname","toLowerCase","authorAcronym","setAuthorAcronym","getAuthorErrors","setAuthorErrors","insertCommentIntoArray","array","commentType","comment","indexToCheck","createSectionsArray","totalNumberOfSections","sectionsArray","sectionIndex","commentsArray","documentErrorObj","getSection","getIndex","getError","getQuoteSection","getQuoteIndex","getCitationSection","getCitationIndex","citationError","worksCitedObject","getSectionIndex","titleSourceErrors","getTitleSourceErrors","titleContainerErrors","getTitleContainerErrors","contributorsErrors","getContributorsErrors","versionErrors","getVersionErrors","publisherErrors","getPublisherErrors","publicationDateErrors","getPublicationDateErrors","locationDateErrors","getLocationErrors","getAuthorIndex","getTitleSourceIndex","getTitleContainerIndex","getContributorsIndex","getVersionIndex","getPublisherIndex","getPublicationDateIndex","getLocationIndex","checkMlaHandler","hasExtraLinesInHeaders","hasMissingHeaders","startParsingIndex","inputHeaders","inputTitle","hasExtraLinesBeforeTitle","text","hasWorksCitedCitations","sectionArrayObject","parent","resultsContainer","createElement","classList","add","leftColumnNode","rightColumnNode","resultTitle","resultTitleText","createTextNode","appendChild","commentNumber","sectionNode","sectionArrayComments","commentNumOfItems","tabNode","wordNode","commentIndex","commentTypeLower","commentNumberNode","numberElement","containerHeader","commentNumberNode2","numberElement2","commentTypeTextNode","commentTypeElement","append","commentMessageText","commentMessageTextNode","commentMessageNode","commentContainerNode","spaceNode"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\nimport {Quote} from './models/Quote.js';\nimport {CitationError} from './models/CitationError.js';\nimport {DocumentError} from './models/DocumentError.js';\nimport {MLAWorksCitation} from './models/MLAWorksCitation.js';\nimport {useState} from 'react';\n\nfunction App() {\n  \n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  let worksCitedList;\n  // let inputSections;\n  let startOfPaperIndex;\n  let sectionWorksCited;\n  const [selectedFormat, updateSelectedFormat] = useState(\"MLA\");\n  \n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  // 33: !    46: .    59: ;    63: ?\n  \n  // Need Valid MLA inline-citation\n  // Check if Block Quotes work!\n  \n  function selectedFormatHandler(e) {\n    e.preventDefault();\n    \n    let value = document.getElementById(\"selectedFormat\").value;\n    if (value !== selectedFormat) {\n      if (value === \"MLA\") {\n        updateSelectedFormat(\"APA\");\n      } else {\n        updateSelectedFormat(\"MLA\");\n      }\n    }\n    \n    console.log(selectedFormat);\n  }\n  \n  function inputTextOnChange(e) {\n    e.preventDefault();\n    \n    const responseImportant = document.getElementById(\"responseImportant\");\n    if (responseImportant.innerHTML === \"Copy and paste your text here\") {\n      responseImportant.innerHTML = \"Click Check Paper!\";\n      responseImportant.style.backgroundColor = \"#ff006a\";\n    }\n  }\n  \n  function inputTextChangeOnBlur(e) {\n    e.preventDefault();\n    \n    let inputText = document.getElementById(\"inputText\").value;\n    \n    if (inputText.length === 0) {\n      const responseImportant = document.getElementById(\"responseImportant\");\n      responseImportant.innerHTML = \"Copy and paste your text here\";\n      responseImportant.style.backgroundColor = \"transparent\";\n    }\n  }\n  \n  function inputTextChangeOnFocus(e) {\n    e.preventDefault();\n    \n    const responseImportant = document.getElementById(\"responseImportant\");\n    if (responseImportant.innerHTML !== \"See results below\") {\n      responseImportant.style.backgroundColor = \"#ff006a\";\n    }\n  }\n  \n  function clearTextArea(e) {\n    e.preventDefault();\n    \n    document.getElementById(\"inputText\").value = \"\";\n    const responseImportant = document.getElementById(\"responseImportant\");\n      responseImportant.innerHTML = \"Copy and paste your text here\";\n    responseImportant.style.backgroundColor = \"transparent\";\n  }\n  \n  function stripQuotations(quote) {\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length -1))) {\n      quote = quote.substring(0, (quote.length -1));\n    }\n    quote.replace(\"\\\"\", \"\");\n    \n    return quote;\n  }\n  \n  function addCitationError(quote, citation, secIndex, index, errorMessage) {\n    quote = stripQuotations(quote);\n    let hasCitationInQuote = false;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        hasCitationInQuote = true;\n        let quoteObject = getQuoteObject(quote);\n        let citationToCheck = quoteObject.getCitation();\n        let citationErrors = quoteObject.getCitationErrors();\n        \n        if (citationErrors === undefined) {\n          citationErrors = [];\n        }\n        \n        if (citation === citationToCheck) {\n          citationErrors.push(\"This citation already exists for given quote.\");\n          // What about errorMessage here?\n          \n        } else {\n          citationErrors.push(errorMessage);\n          \n        }\n        \n        quoteObject.setCitationErrors(errorMessage);\n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (!hasCitationInQuote) {\n      let citationObject;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) {\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationObject = citationsErrorList[i];\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          \n          citationErrors.push(\"This citation already exists.\");\n          citationObject.setCitationErrors(citationErrors);\n          break;\n        }\n      }\n    \n      if (citationObject === undefined) {\n        let citationObject = new CitationError(citation);\n        let citationErrors = [errorMessage];\n        citationObject.setCitationErrors(citationErrors);\n        citationObject.setCitationIndex(index);\n        citationObject.setCitationSection(secIndex);\n      }\n      \n      citationsErrorList.push(citationObject);\n    }\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject = undefined;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let citationStr = quoteObject.getCitation();\n        \n        if (citationStr === undefined) {\n          quoteObject.setCitation(citation);\n          quoteObject.setCitationIndex(index);\n          quoteObject.setCitationSection(secIndex);\n          \n        } else {\n          quoteObject.setCitationError(\"This Citation exists at least twice for the quote in this paper.\");\n          addCitationError(quote, citation, secIndex, index);\n        }\n        \n        dataEntriesList.push(quoteObject);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) { // If quote does not exists with given citation.\n      let citationHasErrors = false;\n      \n      for (let i = 0; i < citationsErrorList.length; i++) { // Checking to see if has errors\n        let citationToCheck = citationsErrorList[i].getCitation();\n        \n        if (citation === citationToCheck) {\n          citationHasErrors = true;\n          let citationObject = getCitationObject(citation);\n          console.log(citationObject);\n          let citationErrors = citationObject.getCitationErrors();\n          \n          if (citationErrors === undefined) {\n            citationErrors = [];\n          }\n          citationErrors.push(\"This citation is not associated with any quote/block quote.\");\n          citationObject.setCitationErrors(citationErrors);\n          citationsErrorList.push(citationObject);\n          break;\n        }\n      }\n      \n      if (!citationHasErrors) {\n        let citationObject = new CitationError(citation);\n        citationsErrorList.push(citationObject);\n      }\n    }\n    \n  }\n  \n  function getCitationObject(citation) {\n    let citationObject;\n    \n    for (let i = 0; i < citationsErrorList.length; i++) {\n      let citationToCheck = citationsErrorList[i].getCitation();\n      \n      if (citation === citationToCheck) {\n        citationObject = citationsErrorList.splice(i, 1);\n        citationObject = citationObject[0];\n        break;\n      }\n    }\n    return citationObject;\n  }\n  \n  function getQuoteObject(quote) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = dataEntriesList.splice(i, 1); //Removes the quoteObj from list.\n        quoteObject = quoteObject[0];\n        \n        break;\n      }\n    }\n    return quoteObject;\n  }\n  \n  function addQuote(quote, secIndex, index) {\n    quote = stripQuotations(quote);\n    let quoteObject;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let quoteToCheck = dataEntriesList[i].getQuote();\n      \n      if (quote === quoteToCheck) {\n        quoteObject = getQuoteObject(quote);\n        let quoteErrors = quoteObject.getQuoteErrors();\n        \n        if (quoteErrors === undefined) {\n          quoteErrors = [];\n        }\n        \n        quoteErrors.push(\"This quote already exists in this document\");\n        quoteObject.setQuoteErrors(quoteErrors);\n        break;\n      }\n    }\n    \n    if (quoteObject === undefined) {\n      quoteObject = new Quote(quote);\n      let quoteErrors = [];\n      \n      quoteObject.setQuoteErrors(quoteErrors);\n      quoteObject.setQuoteIndex(index);\n      quoteObject.setQuoteSection(secIndex);\n    }\n    \n    dataEntriesList.push(quoteObject);\n  }\n  \n  function addQuoteError(quote, errorMessage) {\n    quote = stripQuotations(quote);\n    \n    let quoteObject = getQuoteObject(quote);\n    \n    if (quoteObject === undefined) {\n      console.log(\"SYSTEM ERROR: Cannot add error to a quote that does not exist\");\n      return undefined;\n    }\n    \n    let quoteErrors = quoteObject.getQuoteErrors();\n    if (quoteErrors === undefined) {\n      quoteErrors = [];\n    }\n    \n    quoteErrors.push(errorMessage);\n    quoteObject.setQuoteErrors(quoteErrors);\n    \n    dataEntriesList.unshift(quoteObject);\n  }\n  \n  function addDocumentError(errorMessage, secIndex, index) {\n    let documentErrorObject = new DocumentError(errorMessage, secIndex, index);\n    documentErrorList.push(documentErrorObject);\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      return word;\n    }\n  }\n  \n  function capitalizeFirstLetter(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n  \n  /** This should check that an author's name appears in here! Author must come from Works Cited list*/\n  function validateCitationInText(wordsInSection, citation) {\n    // DO NOT disable the comment below...\n    // eslint-disable-next-line\n    let sentences = wordsInSection.join(\" \").match( /[^\\.!\\?]+[\\.!\\?]+/g );\n    \n    let sentencesWithQuotationCitation = [];\n    // console.log(\"Citation to check: \" +citation);\n    \n    for (let sentenceIndex = 0; sentenceIndex < wordsInSection.length; sentenceIndex++) {\n      let sentence = sentences[sentenceIndex];\n      let hasBeginningQuoteInSentence = false;\n      let hasEndingQuoteInSentence = false;\n      \n      if (sentence === undefined) {\n        continue;\n      }\n      \n      for (let i = 0; i < sentence.length; i++) {\n        let character = sentence[i];\n        \n        if (!hasBeginningQuoteInSentence && firstDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasBeginningQuoteInSentence = true;\n          \n        } else if (!hasEndingQuoteInSentence && lastDoubleQuote_CharValues.includes(character.charCodeAt(0))) {\n          hasEndingQuoteInSentence = true;\n          // console.log(\"Sentence: \"+sentence);\n          break;\n          \n        }\n        \n      }\n      \n      if (hasBeginningQuoteInSentence) {\n        sentencesWithQuotationCitation.push(sentence);\n        // console.log(\"Has beginning quote! \" +sentencesWithQuotationCitation.join(\" \"));\n        // console.log(sentencesWithQuotationCitation.join(\" \").includes(citation));\n      \n        if (hasEndingQuoteInSentence) { // IF IT HAS ENDING QUOTATION MARKS, THE CITATION MUST EXIST AFTER QUOTE!\n          // console.log(\"Quote found! \" +sentencesWithQuotationCitation.join(\" \"));\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  \n  function findMlaBlockCitation(wordsInSection, secIndex) {\n    \n    if (wordsInSection.join(\" \").includes(\")\") && wordsInSection.join(\" \").includes(\"(\")) { // Checks if the section contains a parenthesis. Possible block citation!\n      console.log(wordsInSection);\n      let citation = [];\n      let quote = [];\n      let i = 0;\n      let startedCitationIndex = 0;\n    \n      while (true) {\n        let word = wordsInSection[i];\n        \n        citation = findMlaCitations(word, startedCitationIndex, i, citation);\n        \n        if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n          addQuote(quote.join(\" \"), secIndex, 0);\n          addCitation(quote.join(\" \"), citation.join(\" \"), secIndex, i);\n          return true;\n          \n        } else if (!citation[0].includes(\"(\")) {\n          quote.push(word);\n        } else if (citation[0].includes(\"(\")) {\n          citation.push(word);\n        }\n        \n        i++;\n      }\n    }\n    return false;\n  }\n  \n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    \n    if (!word.includes(\"(\") && (citation === undefined)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [];\n      \n    } else if (word.includes(\"(\") && (startedCitationIndex === i)) { // If citation is right after quote.\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n      \n    } else {\n      citation.push(word);\n    }\n    \n    return [citation.join(\" \")];\n  }\n  \n  /**\n   * Finds all of the quotes in MLA Format and adds them to the Quotes List! \n   */\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      \n      if (wordsInSection.length < 2) { // We don't want empty sections!\n        continue;\n      }\n      \n      let containsQuoteInSection = false;\n      let containsCitationInSection = false;\n      let hasQuoteErrorInSection = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        \n        let containsQuote = false;\n        let quote;\n        let errors = [];\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let wordsinSectionLength = wordsInSection.length -1;\n          let quoteIndex = i;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            \n            word = removeMlaDecimal(word);\n            \n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              errors.push(\"Missing ending parenthesis. Is it possible that you missed one before the citation?\");\n              wordsInQuote.pop();\n              hasQuoteErrorInSection = true;\n              containsQuote = true;\n              break;\n            } else if (i === wordsinSectionLength) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              errors.push(\"Missing ending quotation marks!\");\n              hasQuoteErrorInSection = true;\n              containsQuote = true;\n              break;\n            }\n          }\n          \n          quote = wordsInQuote.join(\" \");\n          \n          let startedCitationIndex = i+1;\n          let containsCitation = false;\n          let citation = [];\n          let citationIndex = 0;\n          let citationIndexFound = false;\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            \n            if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // Could mean that this quote could be associated with the next quote?\n              i--;\n              break;\n            }\n            \n            citation = findMlaCitations(word, startedCitationIndex, i, citation);\n            \n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n              containsCitationInSection = true;\n              containsCitation = true;\n              break;\n            } else if (!citationIndexFound && citation[0].includes(\"(\")) {\n              citationIndexFound = true;\n              citationIndex = i;\n            } else if (i === wordsInSection.length -1) {\n              break;\n            }\n          }\n          \n          if (containsCitation) {\n            citation = citation.join(\" \");\n          }\n          \n          \n          if (containsCitation && containsQuote) {\n            \n            addQuote(quote, secIndex, quoteIndex);\n            addCitation(quote, citation, secIndex, citationIndex);\n            \n            // Validate citation\n            let citationValid = validateCitationInText(wordsInSection, citation);\n            if (!citationValid) {\n              \n            }\n            \n          } else if (containsCitation && !containsQuote) {\n            addCitationError(citation, \"No quote exists for the given citation\");\n            \n          } else if (!containsCitation && containsQuote) {\n            // Could be a quote from different paragraph? Idk...\n            addQuote(quote, secIndex, quoteIndex);\n            addQuoteError(quote, \"This quote does not have an in-text citation\");\n          }\n          \n          if (containsQuote && errors !== undefined) {\n            errors.forEach(error => {\n              addQuoteError(quote, error);\n            });\n          }\n          \n          //Repeat for multiple quotes/citations in paragraph.\n        }\n      }\n    \n      if (!containsQuoteInSection && !hasQuoteErrorInSection) { // If the section does not contain a quote in section or quote errors. Could it be a block citation?\n        containsCitationInSection = findMlaBlockCitation(wordsInSection, secIndex);\n      }\n      \n      if (containsQuoteInSection && !containsCitationInSection) { // This could possibly be a single cited paper!\n        \n      }\n      \n      if (!containsCitationInSection && !containsQuoteInSection) {\n        addDocumentError(\"No quote or citation exists for this paragraph!\", secIndex, 0);\n      }\n    }\n  }\n  \n  /**\n  * Author, Title of source, Title of container, Other contributors\n  * Version, Number, Publisher, Publication date, Location.\n  */\n  function findMlaWorksCited(sectionWorksCited, inputSections, totalNumberSections) {\n    \n    for (let secIndex = sectionWorksCited; secIndex < totalNumberSections; secIndex++) {\n      let mlaWorksCitedObj = new MLAWorksCitation(inputSections[secIndex], secIndex);\n      // DO NOT disable the comment below...\n      // eslint-disable-next-line\n      let sentences = inputSections[secIndex].match( /[^\\.!\\?]+[\\.!\\?]+/g );\n      // for (let sentIndex = 0; sentIndex < sentences.length)\n      let sentenceIndex = 0;\n      \n      if (sentences === null) { // This is null instead of undefined because of the funky .match() function above.\n        addDocumentError(\"Add your works citations at the end of the paper under the Works Cited section!\", secIndex, 0);\n        return;\n      }\n      \n      /* Find Author and Author Acronym! */\n      let authorSentence = sentences[sentenceIndex].trim();\n      authorSentence = authorSentence.replace('.', \"\");\n      \n      // console.log(authorSentence);\n      // console.log(secIndex);\n      // if (authorSentence)\n      let authorNames = authorSentence.split(\",\");\n      let authorErrors = [];\n      \n      if (authorNames === undefined) {\n        addDocumentError(\"Add your works citations at the end of the paper under the Works Cited section!\", secIndex, 0);\n        return;\n      }\n      \n      mlaWorksCitedObj.setAuthorIndex(sentenceIndex);\n      \n      // console.log(authorNames);\n      if (authorNames.length === 1) {\n        mlaWorksCitedObj.setAuthor(authorNames[0]);\n        authorErrors.push(\"Author name must include first and last name in the following format\" +\n        \" 'Last Name, First Name (Optional: Middle Initial/Name).'\");\n      } else if (authorNames.length > 2) {\n        mlaWorksCitedObj.setAuthor(authorSentence);\n        authorErrors.push(\"Make sure to use the following format for the Author's name:\" +\n        \" 'Last Name, First Name (Optional: Middle Initial/Name).'\");\n      } else {\n        let lastNames = authorNames[0].trim().split(\" \");\n        let firstNames = authorNames[1].trim().split(\" \");\n        let fullname = [];\n        \n        firstNames.forEach(word => {\n          fullname.push(capitalizeFirstLetter(word.toLowerCase()));\n        });\n        lastNames.forEach(word => {\n          fullname.push(capitalizeFirstLetter(word.toLowerCase()));\n        });\n        \n        mlaWorksCitedObj.setAuthor(fullname.join(\" \"));\n        \n        let authorAcronym = [];\n        firstNames.forEach(word => {\n          authorAcronym.push(word.charAt(0));\n        });\n        lastNames.forEach(word => {\n          authorAcronym.push(word.charAt(0));\n        });\n        \n        mlaWorksCitedObj.setAuthorAcronym(authorAcronym.join(\"\"));\n        // console.log(authorAcronym);\n        // console.log(firstNames);\n        // console.log(lastNames);\n      }\n      \n      if (authorErrors !== undefined) {\n        let errors = mlaWorksCitedObj.getAuthorErrors();\n        \n        if (errors === undefined) {\n          errors = [];\n        }\n        authorErrors.forEach(error => {\n          errors.push(error);\n        });\n        \n        mlaWorksCitedObj.setAuthorErrors(errors);\n      }\n      \n      \n      \n      \n      sentenceIndex += 1;\n      /*   */\n      \n      worksCitedList.push(mlaWorksCitedObj);\n      \n    }\n    \n    if (worksCitedList[0] === undefined) {\n      return false;\n    }\n    \n    return true;\n  }\n  \n  function insertCommentIntoArray(array, index, commentType, comment) {\n    \n    if (array.length < 2) {\n      array.push(index);\n      array.push(commentType);\n      array.push(comment);\n      return array;\n    }\n    \n    for (let i = 0; i < array.length; i+=3) {\n      let indexToCheck = array[i];\n      \n      if (index <= indexToCheck) {\n        array.splice(i, 0, comment);\n        array.splice(i, 0, commentType);\n        array.splice(i, 0, index);\n        return array;\n      }\n    }\n    \n    array.push(index);\n    array.push(commentType);\n    array.push(comment);\n    return array;\n  }\n  \n  /* Creates an array that holds indexes with errors/suggestions/correct statements for printing! */\n  function createSectionsArray(totalNumberOfSections) {\n    let sectionsArray = [];\n    \n    for (let sectionIndex = 0; sectionIndex < totalNumberOfSections; sectionIndex++) {\n      let commentsArray = []; // The index & comment to the error!\n      \n      /* Documents List! */\n      documentErrorList.forEach(documentErrorObj => {\n        if (documentErrorObj.getSection() === sectionIndex) {\n          commentsArray = insertCommentIntoArray(commentsArray, documentErrorObj.getIndex(), \"Document Error\", documentErrorObj.getError());\n        }\n      });\n      \n      /* Quotes/Citations List! */\n      dataEntriesList.forEach(quoteObject => {\n        // Quotes \n        if (quoteObject.getQuoteSection() === sectionIndex) {\n          let errors = quoteObject.getQuoteErrors();\n          if (errors === undefined) { // There should always be quote errors... for some reason :D\n            return;\n          }\n          \n          if (errors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getQuoteIndex(), \"Valid Quotation\", \"Correct quote format!\");\n          } else {\n            \n            for (let i = 0; i < errors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getQuoteIndex(), \"Quotation Error\", errors[i]);\n            }\n            \n          }\n        }\n        \n        \n        // Citations\n        if (quoteObject.getCitationSection() !== undefined && quoteObject.getCitationSection() === sectionIndex) {\n          let errors = quoteObject.getCitationErrors();\n          \n          if (errors === undefined || errors.length < 1) { // If there aren't any errors\n            commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getCitationIndex(), \"Valid Citation\", \"VALID\");\n          } else {\n            \n            for (let i = 0; i < errors.length; i++) { // insert each error!\n              commentsArray = insertCommentIntoArray(commentsArray, quoteObject.getCitationIndex(), \"Citation Error\", errors[i]);\n            }\n            \n          }\n        }\n      });\n      \n      /* Citation Errors List! */\n      citationsErrorList.forEach(citationError => {\n        if (citationError.getCitationIndex() === sectionIndex) {\n          let errors = citationError.getCitationErrors();\n          if (errors === undefined) {\n            console.log(\"SYSTEM ERROR: citation error must include error message.\");\n            return;\n          }\n          for (let i = 0; i < errors.length; i++) {\n            commentsArray = insertCommentIntoArray(commentsArray, citationError.getCitationIndex(), \"Citation Error\", errors[i]);\n          }\n        }\n      });\n      \n      /* Works Cited List! */\n      worksCitedList.forEach(worksCitedObject => {\n        if (worksCitedObject.getSectionIndex() === sectionIndex) {\n          let authorErrors = worksCitedObject.getAuthorErrors();\n          let titleSourceErrors = worksCitedObject.getTitleSourceErrors();\n          let titleContainerErrors = worksCitedObject.getTitleContainerErrors();\n          let contributorsErrors = worksCitedObject.getContributorsErrors();\n          let versionErrors = worksCitedObject.getVersionErrors();\n          let publisherErrors = worksCitedObject.getPublisherErrors();\n          let publicationDateErrors = worksCitedObject.getPublicationDateErrors();\n          let locationDateErrors = worksCitedObject.getLocationErrors();\n          \n          if (authorErrors === undefined || authorErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getAuthorIndex(), \"Valid Author\", \"VALID\");\n          } else {\n            for (let i = 0; i < authorErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getAuthorIndex(), \"Invalid Author\", authorErrors[i]);\n            }\n          }\n          \n          if (titleSourceErrors === undefined || titleSourceErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleSourceIndex(), \"Valid Title Source\", \"VALID\");\n          } else {\n            for (let i = 0; i < titleSourceErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleSourceIndex(), \"Invalid Title Source\", titleSourceErrors[i]);\n            }\n          }\n          \n          if (titleContainerErrors === undefined || titleContainerErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleContainerIndex(), \"Valid Title Container\", \"VALID\");\n          } else {\n            for (let i = 0; i < titleContainerErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getTitleContainerIndex(), \"Invalid Title Container\", titleContainerErrors[i]);\n            }\n          }\n          \n          if (contributorsErrors === undefined || contributorsErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getContributorsIndex(), \"Valid Contributors\", \"VALID\");\n          } else {\n            for (let i = 0; i < contributorsErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getContributorsIndex(), \"Invalid Contributors\", contributorsErrors[i]);\n            }\n          }\n          \n          \n          if (versionErrors === undefined || versionErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getVersionIndex(), \"Valid Version\", \"VALID\");\n          } else {\n            for (let i = 0; i < versionErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getVersionIndex(), \"Invalid Version\", versionErrors[i]);\n            }\n          }\n          \n          if (publisherErrors === undefined || publisherErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublisherIndex(), \"Valid Publisher\", \"VALID\");\n          } else {\n            for (let i = 0; i < publisherErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublisherIndex(), \"Invalid Publisher\", publisherErrors[i]);\n            }\n          }\n          \n          if (publicationDateErrors === undefined || publicationDateErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublicationDateIndex(), \"Valid Publication Date\", \"VALID\");\n          } else {\n            for (let i = 0; i < publicationDateErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getPublicationDateIndex(), \"Invalid Publication Date\", publicationDateErrors[i]);\n            }\n          }\n          \n          if (locationDateErrors === undefined || locationDateErrors.length < 1) {\n            commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getLocationIndex(), \"Valid Location\", \"VALID\");\n          } else {\n            for (let i = 0; i < locationDateErrors.length; i++) {\n              commentsArray = insertCommentIntoArray(commentsArray, worksCitedObject.getLocationIndex(), \"Invalid Location\", locationDateErrors[i]);\n            }\n          }\n          \n        }\n      });\n      \n      sectionsArray.push(commentsArray);\n    }\n    \n    return sectionsArray;\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    worksCitedList = [];\n    \n    const responseImportant = document.getElementById(\"responseImportant\");\n    responseImportant.innerHTML = \"\";\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    \n    if (inputText.length > 0) {\n      responseImportant.style.backgroundColor = \"#FF006A\";\n      // responseImportant.style.color = \"#FFF\";\n    }\n    \n    let inputSections = inputText.split(\"\\n\");\n    if (inputSections.length <= 1) {\n      \n      if (inputSections[0].length > 1) {\n        responseImportant.innerHTML = \"Make sure you've copied your whole paper before checking! \" +\n        \"Include the following headers: Full Name, Teacher, Class Name, Today's Date.\";\n        return;\n      }\n      \n      responseImportant.innerHTML = \"Copy and paste your paper to start!\";\n      return;\n    }\n\n    /* Parse the headers! */\n    let hasExtraLinesInHeaders = false;\n    let hasMissingHeaders = false;\n    let startParsingIndex = 0;\n    let inputHeaders = [];\n    for (let i = 0; i < inputSections.length; i++) {\n      \n      if (inputSections[i].length < 1) {\n        hasExtraLinesInHeaders = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else if (inputSections[i].length > 15) {\n        hasMissingHeaders = true;\n        break;\n      } else {\n        inputHeaders.push(inputSections[i]);\n      }\n      \n      if (inputHeaders !== undefined && inputHeaders.length === 4) {\n        break;\n      }\n    }\n\n    /* Input Headers handling!! */\n    if (inputHeaders === undefined) {\n      responseImportant.innerHTML = \"his paper is empty\";\n      return;\n    } else if (inputHeaders.length < 4) {\n      addDocumentError(\"Missing headers! Headers must include: your name, your teacher's name, class name, and current date.\", 0, 0);\n    }\n    if (hasExtraLinesInHeaders) {\n      addDocumentError(\"Consider removing the extra lines between headers of your document.\", 0, 0);\n    }\n    if (hasMissingHeaders) {\n      addDocumentError(\"Header/Title is missing! Headers must include: your name, your teacher's name, class name, and current date.\" +\n      \"If your title is over 15 words long, shorten it and click the Check Citation button again.\", 0, 0);\n    }\n    \n    /* Parse up until the Title! */\n    let inputTitle;\n    let hasExtraLinesBeforeTitle = false;\n    for (let i = inputHeaders.length; i < inputSections.length; i++) {\n      \n      if (inputSections[i].length < 2) {\n        hasExtraLinesBeforeTitle = true;\n        inputSections.splice(i, 1);\n        i--;\n      } else {\n        inputTitle = inputSections[i];\n        startParsingIndex = i+1;\n        break;\n      }\n    }\n    \n    /* Title Handling */\n    if (inputTitle === undefined) {\n      responseImportant.innerHTML = \"Please add more to your paper before checking!\";\n      return;\n    }\n    if (inputSections[startParsingIndex].length < 2 || hasExtraLinesBeforeTitle) {\n      addDocumentError(\"Consider removing the extra lines before and after the Title of your document.\", startParsingIndex -1, 0);\n    }\n    \n    /* Parse the extra lines after the Title! We don't want to use them :) */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      }\n    }\n    \n    /* Removing any extra lines in the document.*/\n    startOfPaperIndex = undefined;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length < 2) {\n        inputSections.splice(i, 1);\n        i--;\n      } else if (startOfPaperIndex === undefined && inputSections[i].split(\" \").length > 20) {\n        startOfPaperIndex = i;\n        break;\n      }\n    }\n    \n    if (startOfPaperIndex === undefined) {\n      responseImportant.innerHTML = \"Please add more to your paper before checking!\";\n      return;\n    }\n    \n    sectionWorksCited = undefined; \n    /* Give the section works cited the last section so the loop can work. */\n    for (let i = startParsingIndex; i < inputSections.length; i++) {\n      let text = inputSections[i].trim().split(\" \");\n      if (text.length === 2) {\n        text = text.join(\" \").toLowerCase();\n        if (text === \"works cited\" || text === \"references\" || text === \"bibliography\") {\n          sectionWorksCited = i;\n        }\n      }\n    }\n    \n    if (sectionWorksCited === undefined) {\n      sectionWorksCited = inputSections.length;\n      responseImportant.innerHTML = \"Please include a works cited page at the end of your document. If your works cited page exists,\" +\n      \" make sure to have a single line named 'Works Cited' before the citations\";\n      return;\n    }\n    \n    /* Check for MLA Works Cited page and parse the works cited citations!*/\n    let hasWorksCitedCitations = false;\n    if (sectionWorksCited < inputSections.length) {\n      hasWorksCitedCitations = findMlaWorksCited(sectionWorksCited+1, inputSections, inputSections.length);\n    }\n    \n    if (!hasWorksCitedCitations) {\n      responseImportant.innerHTML = \"Add your source citations under your 'Works Cited' section at the end of the document.\";\n      return;\n    }\n    \n    console.log(inputSections);\n    console.log(startOfPaperIndex, sectionWorksCited);\n    \n    /* Now find the in-text quotes/citations inside the paper sections!*/\n    findMlaQuotes(startOfPaperIndex, inputSections, sectionWorksCited);\n    \n    /* Check that citations alone are valid */\n    \n    \n    console.log(dataEntriesList);\n    console.log(citationsErrorList);\n    console.log(worksCitedList);\n    console.log(documentErrorList);\n    \n    \n    const sectionArrayObject = createSectionsArray(inputSections.length);\n    console.log(sectionArrayObject);\n    \n    /* Creating container for parent node */\n    const parent = document.getElementById(\"bottom-parent\");\n    parent.innerHTML = ''; // Clear previous results!\n    const resultsContainer = document.createElement(\"div\");\n    resultsContainer.classList.add(\"container-other\");\n    \n    /* Creating side comment column nodes */\n    const leftColumnNode = document.createElement(\"div\");\n    leftColumnNode.classList.add(\"container-other\");\n    leftColumnNode.classList.add(\"left-column\");\n    const rightColumnNode = document.createElement(\"div\");\n    rightColumnNode.classList.add(\"container-other\");\n    rightColumnNode.classList.add(\"right-column\");\n    \n    \n    /* Creating results container so text nodes can be appended inside of the container */\n    const resultTitle = document.createElement(\"h1\");\n    const resultTitleText = document.createTextNode(\"Results\");\n    resultTitle.appendChild(resultTitleText);\n    resultsContainer.appendChild(resultTitle);\n    \n    \n    let commentNumber = 1;\n    /* Start creating the paper! parent -> resultsContainer -> text */\n    for (let secIndex = 0; secIndex < inputSections.length; secIndex++) {\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      const sectionNode = document.createElement(\"p\");\n      \n      const sectionArrayComments = sectionArrayObject[secIndex];\n      const commentNumOfItems = sectionArrayComments.length;\n      \n      // console.log(numComments);\n      // console.log(sectionArrayComments);\n      // console.log(wordsInSection.length);\n      \n      if (secIndex >= startOfPaperIndex && secIndex < sectionWorksCited) { // To tab paragraphs!\n        const tabNode = document.createTextNode(\"\\u00a0\\u00a0\\u00a0\\u00a0\");\n        sectionNode.appendChild(tabNode);\n      }\n      \n      for (let i = 0; i < wordsInSection.length; i++) {\n        const word = wordsInSection[i];\n        // const spanNode = document.createElement(\"span\");\n        const wordNode = document.createTextNode(word);\n        \n        for (let commentIndex = 0; commentIndex < commentNumOfItems; commentIndex+=3) {\n          \n          if (i === sectionArrayComments[commentIndex]) {\n            // console.log(secIndex + \" \" + sectionArrayComments[commentIndex]);\n            const commentType = sectionArrayComments[commentIndex+1];\n            const commentTypeLower = commentType.toLowerCase();\n            \n            const commentNumberNode = document.createTextNode(commentNumber);\n            const numberElement = document.createElement(\"span\");\n            \n            if (commentTypeLower.includes(\"error\") || commentTypeLower.includes(\"invalid\")) {\n              numberElement.classList.add(\"red-number\");\n            } else if (commentTypeLower.includes(\"valid\")) {\n              numberElement.classList.add(\"green-number\");\n            } else if (commentTypeLower.includes(\"suggestion\")) {\n              numberElement.classList.add(\"yellow-number\");\n            }\n            \n            numberElement.appendChild(commentNumberNode);\n            sectionNode.appendChild(numberElement);\n            \n            \n            /** USE #2\n            * Create this or the textnodes/nodes from above will be placed in the Paper! \n            */\n            const containerHeader = document.createElement(\"div\");\n            containerHeader.classList.add(\"side-container-header\");\n            \n            const commentNumberNode2 = document.createTextNode(commentNumber);\n            const numberElement2 = document.createElement(\"span\");\n            \n            if (commentTypeLower.includes(\"error\") || commentTypeLower.includes(\"invalid\")) {\n              numberElement2.classList.add(\"red-number\");\n            } else if (commentTypeLower.includes(\"valid\")) {\n              numberElement2.classList.add(\"green-number\");\n            } else if (commentTypeLower.includes(\"suggestion\")) {\n              numberElement2.classList.add(\"yellow-number\");\n            }\n            \n            numberElement2.appendChild(commentNumberNode2);\n            \n            /* Comment Type Node */\n            const commentTypeTextNode = document.createTextNode(commentType);\n            const commentTypeElement = document.createElement(\"h3\");\n            commentTypeElement.append(commentTypeTextNode);\n            \n            /* Comment Message Node */\n            const commentMessageText = sectionArrayComments[commentIndex+2];\n            const commentMessageTextNode = document.createTextNode(commentMessageText);\n            const commentMessageNode = document.createElement(\"p\");\n            commentMessageNode.appendChild(commentMessageTextNode);\n            \n            /* Comment Container Node */\n            const commentContainerNode = document.createElement(\"div\");\n            commentContainerNode.classList.add(\"side-container\");\n            \n            /** Append comment number and type Comment Header div.\n            * Then append Comment Header div to Comment Container div.\n            */\n            containerHeader.appendChild(numberElement2);\n            containerHeader.appendChild(commentTypeElement);\n            commentContainerNode.appendChild(containerHeader);\n            commentContainerNode.appendChild(commentMessageNode);\n            \n            /* If comment number is even, append it to right side. Else, left side.*/\n            if (commentNumber % 2 === 0) {\n              rightColumnNode.appendChild(commentContainerNode);\n            } else {\n              leftColumnNode.appendChild(commentContainerNode);\n            }\n            \n            \n            commentNumber += 1;\n          }\n        }\n        \n        \n        sectionNode.appendChild(wordNode);\n        const spaceNode = document.createTextNode(\" \");\n        sectionNode.appendChild(spaceNode);\n      } \n      \n      resultsContainer.append(sectionNode);\n    }\n    \n    // const results = document.createElement(\"div\");\n    // resultsContainer.appendChild(results);\n    \n    \n    /* Add the results container at the end! */\n    parent.appendChild(leftColumnNode);\n    parent.appendChild(resultsContainer);\n    parent.appendChild(rightColumnNode);\n    \n    \n    console.log(\"\\nEND\\n\\n\");\n    responseImportant.innerHTML = \"See results below\";\n    responseImportant.style.backgroundColor = \"#3CD604\";\n  }\n  \n  return (\n    <div id=\"parent\" className=\"App\">\n      <div id=\"header\" className=\"header\"></div>\n      <div className=\"container\">\n        <h1>Citation Checker</h1>\n        <form className=\"inputForm\" autoComplete=\"off\">\n          <div className=\"input-field\">\n            <textarea onChange={inputTextOnChange} onBlur={inputTextChangeOnBlur} onFocus={inputTextChangeOnFocus} id=\"inputText\" type=\"text\" required/>\n            <label id=\"responseImportant\">Copy and paste your text here</label>\n            <span></span>\n          </div>\n          <div className=\"bottom-row\">\n            <button onClick={checkMlaHandler} type=\"submit\" value=\"Check Paper\" className=\"btn btn-check\">Check Paper</button>\n            <select onChange={selectedFormatHandler} id=\"selectedFormat\" name=\"inputFormat\" className=\"inputFormat\">\n              <option value=\"MLA\">MLA</option>\n              <option value=\"APA\">APA</option>\n            </select>\n            <button onClick={clearTextArea} type=\"submit\" value=\"Clear\" className=\"btn btn-clear\">Clear</button>\n          </div>\n        </form>\n      </div>\n      \n      <div id=\"bottom-parent\" className=\"bottom-parent\">\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}