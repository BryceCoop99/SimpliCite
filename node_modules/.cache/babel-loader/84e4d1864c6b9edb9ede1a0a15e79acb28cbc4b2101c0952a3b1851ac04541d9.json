{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  /* [{Quote: [[{Citation: [Citation Errors]}], [Quote Errors]]}, {...}, ...]*/\n  /**\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation\n\n  // function stripParenthesis(citation) {\n  //   return citation.replace(/[{()}]/g, '');\n  // }\n\n  function stripQuotations(quote) {\n    console.log(quote);\n    const editQuote = quote;\n    let quote1 = String.fromCharCode(34);\n    let quote2 = String.fromCharCode(8220);\n    let quote3 = String.fromCharCode(8221);\n    editQuote.replace(quote1, \"\");\n    editQuote.replace(quote2, \"\");\n    editQuote.replace(quote3, \"\");\n    return quote;\n  }\n  function checkCitationInList(quote, citation) {\n    let citationObj = undefined;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let [key, value] = Object.entries(dataEntriesList[i]);\n      if (quote === key) {\n        if (value.length === 2) {\n          citationObj = value[0];\n          let citeKey = Object.keys(citationObj);\n          if (citeKey === citation) {\n            console.log(\"Citation exists in data!\");\n            return citationObj;\n          }\n        } else if (value.length === 1) {\n          console.log(\"How?\");\n        } else {}\n      }\n    }\n    return citationObj;\n  }\n  function checkQuoteInList(quote) {\n    quote = stripQuotations(quote);\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let key = Object.keys(dataEntriesList[i]);\n      if (quote === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation) {\n    // console.log(\"Adding citation to array\");\n    quote = stripQuotations(quote);\n    let citationObj = checkCitationInList(quote, citation);\n    let values = citationObj;\n    if (citationObj === undefined) {\n      if (values === undefined) {\n        // Initialize the value for the citation\n        console.log(\"Initializing structure\");\n        citationObj = {};\n        citationObj[citation] = [];\n        values = [];\n        values.unshift(citationObj);\n        // console.log(\"Checking: \" +citationObj[values][0])\n      } else {\n        citationObj = {};\n        citationObj[citation] = [];\n        values.unshift(citationObj);\n      }\n      console.log(citationObj);\n      // quotesList.quote = values;\n      for (let [key, value] of Object.entries(citationObj)) {\n        console.log(\"Key: \" + key + \" Value: \" + value);\n      }\n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n  }\n  function addQuote(quote) {\n    // console.log(\"Adding quote to array!\");\n    quote = stripQuotations(quote);\n    console.log(\"Stripped quote: \" + quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    let newObj = undefined;\n    if (dataHasQuote) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      newObj = {};\n      console.log(\"Quote to add: \" + quote);\n      newObj[quote] = [];\n      dataEntriesList.push(newObj);\n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" + JSON.stringify(newObj));\n    console.log(\"Data Entries\");\n    if (newObj !== undefined) {\n      for (let i = 0; i < dataEntriesList.length; i++) {\n        console.log(dataEntriesList[i]);\n      }\n    }\n  }\n  function addDocumentError(errorMessage) {\n    let citation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (citation !== undefined) {\n      let newObj = {};\n      newObj[citation] = errorMessage;\n      citationsErrorList.push(newObj);\n    } else {\n      documentErrorList.push(errorMessage);\n    }\n  }\n\n  // function addCitationError(quote, citation, errorMessage) {\n  //   const dataHasQuote = checkQuoteInList(quote);\n\n  //     if (dataHasQuote) {\n  //       let index = 0;\n\n  //       for (let i = 0; i < dataEntriesList.length; i++) {\n  //         let [key, value] = Object.keys(dataEntriesList(i));\n  //         if (quote === key) {\n  //           index = i;\n  //           break;\n  //         }\n  //       }\n\n  //       // Do citation work\n  //     }\n\n  // }\n\n  function addQuoteError(quote, errorMessage) {\n    console.log(\"Adding quote error!\");\n    quote = stripQuotations(quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    if (dataHasQuote) {\n      let index = 0;\n      for (let i = 0; i < dataEntriesList.length; i++) {\n        let key = Object.keys(dataEntriesList[i]);\n        if (quote === key) {\n          index = i;\n          break;\n        }\n      }\n      let value = Object.keys(dataEntriesList)[index];\n      value.push(errorMessage);\n      console.log(\"Error pushed into quote\");\n    } else {\n      console.log(\"SYSTEM ERROR: shouldn't add error before quote is made\");\n    }\n\n    // for (let [key, value] in Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n  }\n\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      // Else, keep the word!\n      return word;\n    }\n  }\n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    addQuote(wordsInQuote.join(\" \"));\n  }\n  function findMlaBlockCitation(wordsInSection) {\n    if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n      // Checks if last word contains ending parenthesis. Possible block citation!\n      let citation = [];\n\n      /* Going backwards in this section! :) */\n      for (let j = wordsInSection.length - 1; j > 0; j--) {\n        let word = wordsInSection[j];\n        if (word.includes(\"(\")) {\n          // If has opening paren, then citation exists!\n          citation.unshift(word);\n          addQuote(wordsInSection);\n          addCitation(wordsInSection, citation.join(\" \"));\n          addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n          return true;\n        }\n        citation.unshift(word);\n      }\n    }\n    return false;\n  }\n\n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    if (!word.includes(\"(\") && startedCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [citation.join(\" \")];\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\") && startedCitationIndex === i) {\n      // If citation is right after quote.\n      // word.replace(/[(]/g, '');\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        // word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    return [citation.join(\" \")];\n  }\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === wordsInSection.length - 1) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              containsQuotationError = true;\n              break;\n            }\n          }\n          quote = wordsInQuote.join(\" \");\n          quote = stripQuotations(quote); // Strip the quote because it's not necessary anymore.\n          addQuote(quote);\n          if (containsQuotationError) {\n            // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n              // If citation was found\n              containsCitation = true;\n              break;\n            } else if (i === wordsInSection.length - 1) {\n              // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          if (citation !== undefined) {\n            citation = citation[0];\n          }\n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addDocumentError(\"No quote exists for the given citation\", citation);\n          } else {\n            let quoteKey = Object.keys(dataEntriesList.length - 1);\n            console.log(\"Quote: \" + quoteKey + \" does not have a citation\");\n          }\n\n          /* Add Citation error if there is one!*/\n        }\n      }\n\n      if (!containsQuoteInSection) {\n        // If the section does not contain a quote. Could it be a block citation?\n        let isBlockCitation = findMlaBlockCitation(wordsInSection);\n        if (isBlockCitation) {\n          console.log(\"It is a Block Citation\");\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited = inputSections.length - 1; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n\n    dataEntriesList.forEach(quoteObject => {\n      for (let [key, value] in Object.entries(quoteObject)) {\n        console.log(\"Key: \" + key + \"\\nValue: \" + value);\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 496,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","documentErrorList","dataEntriesList","citationsErrorList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","stripQuotations","quote","console","log","editQuote","quote1","String","fromCharCode","quote2","quote3","replace","checkCitationInList","citation","citationObj","undefined","i","length","key","value","Object","entries","citeKey","keys","checkQuoteInList","addCitation","values","unshift","addQuote","dataHasQuote","newObj","push","JSON","stringify","addDocumentError","errorMessage","addQuoteError","index","removeMlaDecimal","word","chars","split","result","slice","addMlaBlockQuote","wordsInSection","lastIndex","wordsInQuote","join","findMlaBlockCitation","includes","j","findMlaCitations","startedCitationIndex","finalWord","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","currentSection","containsQuoteInSection","containsQuote","error","charCodeAt","containsQuotationError","containsFinalQuote","containsCitation","quoteKey","isBlockCitation","checkMlaHandler","e","preventDefault","inputText","document","getElementById","startParsingIndex","sectionNum","root","innerHTML","forEach","quoteObject"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n  \n  /* [{Quote: [[{Citation: [Citation Errors]}], [Quote Errors]]}, {...}, ...]*/\n  /**\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation\n  \n  // function stripParenthesis(citation) {\n  //   return citation.replace(/[{()}]/g, '');\n  // }\n  \n  function stripQuotations(quote) {\n    console.log(quote);\n    const editQuote = quote;\n    \n    let quote1 = String.fromCharCode(34);\n    let quote2 = String.fromCharCode(8220);\n    let quote3 = String.fromCharCode(8221);\n    editQuote.replace(quote1, \"\");\n    editQuote.replace(quote2, \"\");\n    editQuote.replace(quote3, \"\");\n    return quote;\n  }\n  \n  function checkCitationInList(quote, citation) {\n    let citationObj = undefined;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let [key, value] = Object.entries(dataEntriesList[i]);\n      \n      if (quote === key) {\n        \n        if (value.length === 2) {\n          citationObj = value[0];\n          let citeKey = Object.keys(citationObj);\n          \n          if (citeKey === citation) {\n            console.log(\"Citation exists in data!\");\n            return citationObj;\n          }\n          \n        } else if (value.length === 1) {\n          console.log(\"How?\");\n          \n        } else {\n          \n        }\n      }\n    }\n    \n    return citationObj;\n  }\n  \n  function checkQuoteInList(quote) {\n    quote = stripQuotations(quote);\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let key = Object.keys(dataEntriesList[i]);\n      \n      if (quote === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation) {\n    // console.log(\"Adding citation to array\");\n    quote = stripQuotations(quote);\n    let citationObj = checkCitationInList(quote, citation);\n    let values = citationObj;\n    \n    if (citationObj === undefined) {\n      \n      if (values === undefined) { // Initialize the value for the citation\n        console.log(\"Initializing structure\");\n        citationObj = {};\n        citationObj[citation] = [];\n        values = [];\n        values.unshift(citationObj);\n        // console.log(\"Checking: \" +citationObj[values][0])\n      } else {\n        citationObj = {};\n        citationObj[citation] = [];\n        values.unshift(citationObj);\n      }\n      \n      console.log(citationObj);\n      // quotesList.quote = values;\n      for (let [key, value] of Object.entries(citationObj)) {\n        console.log(\"Key: \" +key+ \" Value: \" +value);\n      }\n      \n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n    \n  }\n  \n  function addQuote(quote) {\n    // console.log(\"Adding quote to array!\");\n    quote = stripQuotations(quote);\n    console.log(\"Stripped quote: \" +quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    let newObj = undefined;\n    \n    if (dataHasQuote) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      newObj = {};\n      console.log(\"Quote to add: \" +quote);\n      newObj[quote] = [];\n      dataEntriesList.push(newObj);\n      \n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" +JSON.stringify(newObj));\n    console.log(\"Data Entries\");\n    \n    if (newObj !== undefined) {\n      for (let i = 0; i < dataEntriesList.length; i++) {\n        console.log(dataEntriesList[i]);\n      }\n    }\n    \n  }\n  \n  function addDocumentError(errorMessage, citation = undefined) {\n    if (citation !== undefined) {\n      let newObj = {};\n      newObj[citation] = errorMessage;\n      citationsErrorList.push(newObj);\n    } else {\n      documentErrorList.push(errorMessage);\n    }\n    \n  }\n  \n  // function addCitationError(quote, citation, errorMessage) {\n  //   const dataHasQuote = checkQuoteInList(quote);\n      \n  //     if (dataHasQuote) {\n  //       let index = 0;\n        \n  //       for (let i = 0; i < dataEntriesList.length; i++) {\n  //         let [key, value] = Object.keys(dataEntriesList(i));\n  //         if (quote === key) {\n  //           index = i;\n  //           break;\n  //         }\n  //       }\n        \n  //       // Do citation work\n  //     }\n    \n  // }\n  \n  function addQuoteError(quote, errorMessage) {\n    console.log(\"Adding quote error!\");\n    \n    quote = stripQuotations(quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    \n    if (dataHasQuote) {\n      let index = 0;\n      \n      for (let i = 0; i < dataEntriesList.length; i++) {\n        let key = Object.keys(dataEntriesList[i]);\n        \n        if (quote === key) {\n          index = i;\n          break;\n        }\n      }\n      \n      let value = Object.keys(dataEntriesList)[index];\n      value.push(errorMessage);\n      console.log(\"Error pushed into quote\");\n      \n    } else {\n      console.log(\"SYSTEM ERROR: shouldn't add error before quote is made\");\n    }\n    \n    // for (let [key, value] in Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else { // Else, keep the word!\n      return word;\n    }\n  }\n  \n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    \n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    \n    addQuote(wordsInQuote.join(\" \"));\n  }\n  \n  function findMlaBlockCitation(wordsInSection) {\n    if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n      let citation = [];\n    \n      /* Going backwards in this section! :) */\n      for (let j = (wordsInSection.length -1); j > 0; j--) {\n        let word = wordsInSection[j];\n        \n        if (word.includes(\"(\")) { // If has opening paren, then citation exists!\n          citation.unshift(word);\n          addQuote(wordsInSection);\n          addCitation(wordsInSection, citation.join(\" \"));\n          addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n          return true;\n        }\n        citation.unshift(word);\n      }\n    }\n    \n    return false;\n  }\n  \n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    \n    if (!word.includes(\"(\") && (startedCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [citation.join(\" \")];\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\") && (startedCitationIndex === i)) { // If citation is right after quote.\n      // word.replace(/[(]/g, '');\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        // word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n      \n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    \n    return [citation.join(\" \")];\n  }\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            \n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === (wordsInSection.length -1)) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              containsQuotationError = true;\n              break;\n            }\n          }\n          \n          quote = wordsInQuote.join(\" \");\n          quote = stripQuotations(quote); // Strip the quote because it's not necessary anymore.\n          addQuote(quote);\n          \n          if (containsQuotationError) { // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          \n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n            \n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n              containsCitation = true;\n              break;\n            } else if (i === (wordsInSection.length -1)) { // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          \n          if (citation !== undefined) {\n            citation = citation[0];\n          }\n          \n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addDocumentError(\"No quote exists for the given citation\", citation);\n          } else {\n            let quoteKey = (Object.keys(dataEntriesList.length -1));\n            console.log(\"Quote: \" +quoteKey+ \" does not have a citation\");\n          }\n          \n          /* Add Citation error if there is one!*/\n          \n        }\n      }\n      \n      if (!containsQuoteInSection) { // If the section does not contain a quote. Could it be a block citation?\n        let isBlockCitation = findMlaBlockCitation(wordsInSection);\n        \n        if (isBlockCitation) {\n          console.log(\"It is a Block Citation\");\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited = (inputSections.length -1); // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n    \n    dataEntriesList.forEach(quoteObject => {\n      for (let [key, value] in Object.entries(quoteObject)) {\n        console.log(\"Key: \" +key+ \"\\nValue: \" +value);\n      }\n    });\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAAC;AAEnB,SAASA,GAAG,GAAG;EAEb;EACA;AACF;AACA;AACA;EACE,IAAIC,iBAAiB;EACrB,IAAIC,eAAe;EACnB,IAAIC,kBAAkB;EACtB,MAAMC,2BAA2B,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;EAC9C,MAAMC,0BAA0B,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;;EAE7C;;EAEA;EACA;EACA;;EAEA,SAASC,eAAe,CAACC,KAAK,EAAE;IAC9BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,MAAMG,SAAS,GAAGH,KAAK;IAEvB,IAAII,MAAM,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC;IACpC,IAAIC,MAAM,GAAGF,MAAM,CAACC,YAAY,CAAC,IAAI,CAAC;IACtC,IAAIE,MAAM,GAAGH,MAAM,CAACC,YAAY,CAAC,IAAI,CAAC;IACtCH,SAAS,CAACM,OAAO,CAACL,MAAM,EAAE,EAAE,CAAC;IAC7BD,SAAS,CAACM,OAAO,CAACF,MAAM,EAAE,EAAE,CAAC;IAC7BJ,SAAS,CAACM,OAAO,CAACD,MAAM,EAAE,EAAE,CAAC;IAC7B,OAAOR,KAAK;EACd;EAEA,SAASU,mBAAmB,CAACV,KAAK,EAAEW,QAAQ,EAAE;IAC5C,IAAIC,WAAW,GAAGC,SAAS;IAE3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,eAAe,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAI,CAACE,GAAG,EAAEC,KAAK,CAAC,GAAGC,MAAM,CAACC,OAAO,CAACxB,eAAe,CAACmB,CAAC,CAAC,CAAC;MAErD,IAAId,KAAK,KAAKgB,GAAG,EAAE;QAEjB,IAAIC,KAAK,CAACF,MAAM,KAAK,CAAC,EAAE;UACtBH,WAAW,GAAGK,KAAK,CAAC,CAAC,CAAC;UACtB,IAAIG,OAAO,GAAGF,MAAM,CAACG,IAAI,CAACT,WAAW,CAAC;UAEtC,IAAIQ,OAAO,KAAKT,QAAQ,EAAE;YACxBV,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;YACvC,OAAOU,WAAW;UACpB;QAEF,CAAC,MAAM,IAAIK,KAAK,CAACF,MAAM,KAAK,CAAC,EAAE;UAC7Bd,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QAErB,CAAC,MAAM,CAEP;MACF;IACF;IAEA,OAAOU,WAAW;EACpB;EAEA,SAASU,gBAAgB,CAACtB,KAAK,EAAE;IAC/BA,KAAK,GAAGD,eAAe,CAACC,KAAK,CAAC;IAE9B,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,eAAe,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAIE,GAAG,GAAGE,MAAM,CAACG,IAAI,CAAC1B,eAAe,CAACmB,CAAC,CAAC,CAAC;MAEzC,IAAId,KAAK,KAAKgB,GAAG,EAAE;QACjB,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;;EAEA;EACA,SAASO,WAAW,CAACvB,KAAK,EAAEW,QAAQ,EAAE;IACpC;IACAX,KAAK,GAAGD,eAAe,CAACC,KAAK,CAAC;IAC9B,IAAIY,WAAW,GAAGF,mBAAmB,CAACV,KAAK,EAAEW,QAAQ,CAAC;IACtD,IAAIa,MAAM,GAAGZ,WAAW;IAExB,IAAIA,WAAW,KAAKC,SAAS,EAAE;MAE7B,IAAIW,MAAM,KAAKX,SAAS,EAAE;QAAE;QAC1BZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrCU,WAAW,GAAG,CAAC,CAAC;QAChBA,WAAW,CAACD,QAAQ,CAAC,GAAG,EAAE;QAC1Ba,MAAM,GAAG,EAAE;QACXA,MAAM,CAACC,OAAO,CAACb,WAAW,CAAC;QAC3B;MACF,CAAC,MAAM;QACLA,WAAW,GAAG,CAAC,CAAC;QAChBA,WAAW,CAACD,QAAQ,CAAC,GAAG,EAAE;QAC1Ba,MAAM,CAACC,OAAO,CAACb,WAAW,CAAC;MAC7B;MAEAX,OAAO,CAACC,GAAG,CAACU,WAAW,CAAC;MACxB;MACA,KAAK,IAAI,CAACI,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,WAAW,CAAC,EAAE;QACpDX,OAAO,CAACC,GAAG,CAAC,OAAO,GAAEc,GAAG,GAAE,UAAU,GAAEC,KAAK,CAAC;MAC9C;IAEF,CAAC,MAAM;MACLhB,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACpD;EAEF;EAEA,SAASwB,QAAQ,CAAC1B,KAAK,EAAE;IACvB;IACAA,KAAK,GAAGD,eAAe,CAACC,KAAK,CAAC;IAC9BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAEF,KAAK,CAAC;IACtC,MAAM2B,YAAY,GAAGL,gBAAgB,CAACtB,KAAK,CAAC;IAC5C,IAAI4B,MAAM,GAAGf,SAAS;IAEtB,IAAIc,YAAY,EAAE;MAChB1B,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC9D,CAAC,MAAM;MACL0B,MAAM,GAAG,CAAC,CAAC;MACX3B,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAEF,KAAK,CAAC;MACpC4B,MAAM,CAAC5B,KAAK,CAAC,GAAG,EAAE;MAClBL,eAAe,CAACkC,IAAI,CAACD,MAAM,CAAC;IAE9B;IACA;IACA;IACA;IACA3B,OAAO,CAACC,GAAG,CAAC,eAAe,GAAE4B,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,CAAC;IACpD3B,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAE3B,IAAI0B,MAAM,KAAKf,SAAS,EAAE;MACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,eAAe,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC/Cb,OAAO,CAACC,GAAG,CAACP,eAAe,CAACmB,CAAC,CAAC,CAAC;MACjC;IACF;EAEF;EAEA,SAASkB,gBAAgB,CAACC,YAAY,EAAwB;IAAA,IAAtBtB,QAAQ,uEAAGE,SAAS;IAC1D,IAAIF,QAAQ,KAAKE,SAAS,EAAE;MAC1B,IAAIe,MAAM,GAAG,CAAC,CAAC;MACfA,MAAM,CAACjB,QAAQ,CAAC,GAAGsB,YAAY;MAC/BrC,kBAAkB,CAACiC,IAAI,CAACD,MAAM,CAAC;IACjC,CAAC,MAAM;MACLlC,iBAAiB,CAACmC,IAAI,CAACI,YAAY,CAAC;IACtC;EAEF;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA,SAASC,aAAa,CAAClC,KAAK,EAAEiC,YAAY,EAAE;IAC1ChC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAElCF,KAAK,GAAGD,eAAe,CAACC,KAAK,CAAC;IAC9B,MAAM2B,YAAY,GAAGL,gBAAgB,CAACtB,KAAK,CAAC;IAE5C,IAAI2B,YAAY,EAAE;MAChB,IAAIQ,KAAK,GAAG,CAAC;MAEb,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,eAAe,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC/C,IAAIE,GAAG,GAAGE,MAAM,CAACG,IAAI,CAAC1B,eAAe,CAACmB,CAAC,CAAC,CAAC;QAEzC,IAAId,KAAK,KAAKgB,GAAG,EAAE;UACjBmB,KAAK,GAAGrB,CAAC;UACT;QACF;MACF;MAEA,IAAIG,KAAK,GAAGC,MAAM,CAACG,IAAI,CAAC1B,eAAe,CAAC,CAACwC,KAAK,CAAC;MAC/ClB,KAAK,CAACY,IAAI,CAACI,YAAY,CAAC;MACxBhC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAExC,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACvE;;IAEA;IACA;IACA;EACF;;EAEA,SAASkC,gBAAgB,CAACC,IAAI,EAAE;IAC9B,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,EAAE,CAAC;IAC5B,IAAID,KAAK,CAAED,IAAI,CAACtB,MAAM,GAAC,CAAC,CAAE,KAAK,GAAG,EAAE;MAAE;MACpC;MACA,MAAMyB,MAAM,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAChC,OAAOD,MAAM;IACf,CAAC,MAAM;MAAE;MACP,OAAOH,IAAI;IACb;EACF;EAEA,SAASK,gBAAgB,CAACC,cAAc,EAAEC,SAAS,EAAE;IACnD,IAAIC,YAAY,GAAG,EAAE;IAErB,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,SAAS,EAAE9B,CAAC,EAAE,EAAE;MAClC,MAAMuB,IAAI,GAAGM,cAAc,CAAC7B,CAAC,CAAC;MAC9B+B,YAAY,CAAChB,IAAI,CAACQ,IAAI,CAAC;IACzB;IAEAX,QAAQ,CAACmB,YAAY,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;EAClC;EAEA,SAASC,oBAAoB,CAACJ,cAAc,EAAE;IAC5C,IAAIA,cAAc,CAACA,cAAc,CAAC5B,MAAM,GAAE,CAAC,CAAC,CAACiC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAAE;MAC5D,IAAIrC,QAAQ,GAAG,EAAE;;MAEjB;MACA,KAAK,IAAIsC,CAAC,GAAIN,cAAc,CAAC5B,MAAM,GAAE,CAAE,EAAEkC,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACnD,IAAIZ,IAAI,GAAGM,cAAc,CAACM,CAAC,CAAC;QAE5B,IAAIZ,IAAI,CAACW,QAAQ,CAAC,GAAG,CAAC,EAAE;UAAE;UACxBrC,QAAQ,CAACc,OAAO,CAACY,IAAI,CAAC;UACtBX,QAAQ,CAACiB,cAAc,CAAC;UACxBpB,WAAW,CAACoB,cAAc,EAAEhC,QAAQ,CAACmC,IAAI,CAAC,GAAG,CAAC,CAAC;UAC/CJ,gBAAgB,CAACC,cAAc,EAAEM,CAAC,CAAC,CAAC,CAAC;UACrC,OAAO,IAAI;QACb;QACAtC,QAAQ,CAACc,OAAO,CAACY,IAAI,CAAC;MACxB;IACF;IAEA,OAAO,KAAK;EACd;;EAEA;EACA,SAASa,gBAAgB,CAACb,IAAI,EAAEc,oBAAoB,EAAErC,CAAC,EAAEH,QAAQ,EAAE;IAEjE,IAAI,CAAC0B,IAAI,CAACW,QAAQ,CAAC,GAAG,CAAC,IAAKG,oBAAoB,KAAKrC,CAAE,EAAE;MAAE;MACzDb,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAC/D,OAAO,CAACS,QAAQ,CAACmC,IAAI,CAAC,GAAG,CAAC,CAAC;MAC3B;;MAEA;MACA;MACA;MACA;;MAEA;MACA;;MAGA;;MAEA;;MAEA;IAEF,CAAC,MAAM,IAAIT,IAAI,CAACW,QAAQ,CAAC,GAAG,CAAC,IAAKG,oBAAoB,KAAKrC,CAAE,EAAE;MAAE;MAC/D;;MAEA,IAAIuB,IAAI,CAACW,QAAQ,CAAC,GAAG,CAAC,EAAE;QAAE;QACxB;QACA;QACA,MAAMI,SAAS,GAAGhB,gBAAgB,CAACC,IAAI,CAAC;QACxC1B,QAAQ,CAACkB,IAAI,CAACuB,SAAS,CAAC;QACxB,OAAO,CAACzC,QAAQ,CAACmC,IAAI,CAAC,GAAG,CAAC,CAAC;MAC7B;MACA;MACA;MACA;MACAnC,QAAQ,CAACkB,IAAI,CAACQ,IAAI,CAAC;IAErB,CAAC,MAAM,IAAIA,IAAI,CAACW,QAAQ,CAAC,GAAG,CAAC,EAAE;MAAE;MAC/BX,IAAI,CAAC5B,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;MACxB;MACA,MAAM2C,SAAS,GAAGhB,gBAAgB,CAACC,IAAI,CAAC;MACxC1B,QAAQ,CAACkB,IAAI,CAACuB,SAAS,CAAC;MACxB,OAAO,CAACzC,QAAQ,CAACmC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE7B,CAAC,MAAM;MACL;MACAnC,QAAQ,CAACkB,IAAI,CAACQ,IAAI,CAAC;IACrB;IAEA,OAAO,CAAC1B,QAAQ,CAACmC,IAAI,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEA,SAASO,aAAa,CAACC,aAAa,EAAEC,aAAa,EAAEC,iBAAiB,EAAE;IACtE;;IAEA,KAAK,IAAIC,QAAQ,GAAGH,aAAa,EAAEG,QAAQ,GAAGD,iBAAiB,EAAEC,QAAQ,EAAE,EAAE;MAC3E;MACA,IAAIC,cAAc,GAAGH,aAAa,CAACE,QAAQ,CAAC,CAAChD,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MAC9D,MAAMkC,cAAc,GAAGe,cAAc,CAACnB,KAAK,CAAC,GAAG,CAAC;MAChD;MACA,IAAIoB,sBAAsB,GAAG,KAAK;;MAElC;MACA,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,cAAc,CAAC5B,MAAM,EAAED,CAAC,EAAE,EAAE;QAC9C,IAAIuB,IAAI,GAAGM,cAAc,CAAC7B,CAAC,CAAC;QAC5B;QACAb,OAAO,CAACC,GAAG,CAACmC,IAAI,CAAC;QACjB,IAAIuB,aAAa,GAAG,KAAK;QACzB,IAAI5D,KAAK;QACT,IAAI6D,KAAK;QAET,IAAIhE,2BAA2B,CAACmD,QAAQ,CAACX,IAAI,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;UAAE;UAC9D;UACA,IAAIjB,YAAY,GAAG,EAAE;UACrBA,YAAY,CAAChB,IAAI,CAACQ,IAAI,CAAC;UACvB,IAAI0B,sBAAsB,GAAG,KAAK;UAElC,OAAO,IAAI,EAAE;YAAE;YACbjD,CAAC,EAAE;YACHuB,IAAI,GAAGM,cAAc,CAAC7B,CAAC,CAAC;YAExB,MAAMkD,kBAAkB,GAAIlE,0BAA0B,CAACkD,QAAQ,CAACX,IAAI,CAACyB,UAAU,CAACzB,IAAI,CAACtB,MAAM,GAAE,CAAC,CAAC,CAAE;YACjG8B,YAAY,CAAChB,IAAI,CAACQ,IAAI,CAAC;YAEvB,IAAI2B,kBAAkB,EAAE;cACtBL,sBAAsB,GAAG,IAAI;cAC7BC,aAAa,GAAG,IAAI;cACpB;YACF,CAAC,MAAM,IAAIvB,IAAI,CAACW,QAAQ,CAAC,GAAG,CAAC,EAAE;cAAE;cAC/Ba,KAAK,GAAG,4FAA4F;cACpGE,sBAAsB,GAAG,IAAI;cAC7B;YACF,CAAC,MAAM,IAAIjD,CAAC,KAAM6B,cAAc,CAAC5B,MAAM,GAAE,CAAE,EAAE;cAAE;cAC7C8C,KAAK,GAAG,iCAAiC;cACzCE,sBAAsB,GAAG,IAAI;cAC7B;YACF;UACF;UAEA/D,KAAK,GAAG6C,YAAY,CAACC,IAAI,CAAC,GAAG,CAAC;UAC9B9C,KAAK,GAAGD,eAAe,CAACC,KAAK,CAAC,CAAC,CAAC;UAChC0B,QAAQ,CAAC1B,KAAK,CAAC;UAEf,IAAI+D,sBAAsB,EAAE;YAAE;YAC5BjD,CAAC,EAAE;YACHoB,aAAa,CAAClC,KAAK,EAAE6D,KAAK,CAAC;UAC7B;UAEA,IAAIV,oBAAoB,GAAGrC,CAAC;UAC5B,IAAImD,gBAAgB,GAAG,KAAK;UAC5B,IAAItD,QAAQ,GAAG,EAAE;;UAEjB;UACA,OAAO,IAAI,EAAE;YACXG,CAAC,EAAE;YACHuB,IAAI,GAAGM,cAAc,CAAC7B,CAAC,CAAC;YACxB;;YAEAH,QAAQ,GAAGuC,gBAAgB,CAACb,IAAI,EAAEc,oBAAoB,GAAC,CAAC,EAAErC,CAAC,EAAEH,QAAQ,CAAC;YAEtE,IAAIA,QAAQ,CAAC,CAAC,CAAC,CAACqC,QAAQ,CAAC,GAAG,CAAC,IAAIrC,QAAQ,CAAC,CAAC,CAAC,CAACqC,QAAQ,CAAC,GAAG,CAAC,EAAE;cAAE;cAC5DiB,gBAAgB,GAAG,IAAI;cACvB;YACF,CAAC,MAAM,IAAInD,CAAC,KAAM6B,cAAc,CAAC5B,MAAM,GAAE,CAAE,EAAE;cAAE;cAC7CmB,aAAa,CAAClC,KAAK,EAAE,6BAA6B,CAAC;cACnD;YACF;UACF;UAEA,IAAIW,QAAQ,KAAKE,SAAS,EAAE;YAC1BF,QAAQ,GAAGA,QAAQ,CAAC,CAAC,CAAC;UACxB;UAEA,IAAIsD,gBAAgB,IAAIL,aAAa,EAAE;YACrCrC,WAAW,CAACvB,KAAK,EAAEW,QAAQ,CAAC;YAC5B;UACF,CAAC,MAAM,IAAIsD,gBAAgB,EAAE;YAC3BjC,gBAAgB,CAAC,wCAAwC,EAAErB,QAAQ,CAAC;UACtE,CAAC,MAAM;YACL,IAAIuD,QAAQ,GAAIhD,MAAM,CAACG,IAAI,CAAC1B,eAAe,CAACoB,MAAM,GAAE,CAAC,CAAE;YACvDd,OAAO,CAACC,GAAG,CAAC,SAAS,GAAEgE,QAAQ,GAAE,2BAA2B,CAAC;UAC/D;;UAEA;QAEF;MACF;;MAEA,IAAI,CAACP,sBAAsB,EAAE;QAAE;QAC7B,IAAIQ,eAAe,GAAGpB,oBAAoB,CAACJ,cAAc,CAAC;QAE1D,IAAIwB,eAAe,EAAE;UACnBlE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACvC,CAAC,MAAM;UACLD,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACnD;MACF;IACF;EACF;EAEA,SAASkE,eAAe,CAACC,CAAC,EAAE;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB5E,iBAAiB,GAAG,EAAE;IACtBE,kBAAkB,GAAG,EAAE;IACvBD,eAAe,GAAG,EAAE;IAEpB,MAAM4E,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACxD,KAAK;IAC5D;;IAEA,IAAIsD,SAAS,KAAK1D,SAAS,EAAE;MAC3B;IACF;IAEA,MAAM0C,aAAa,GAAGgB,SAAS,CAAChC,KAAK,CAAC,IAAI,CAAC;IAC3C;IACAtC,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAEqD,aAAa,CAACxC,MAAM,CAAC;;IAEzD;IACA,IAAI2D,iBAAiB,GAAG,CAAC;IACzB,KAAK,IAAI5D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,aAAa,CAACxC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAIyC,aAAa,CAACzC,CAAC,CAAC,CAACC,MAAM,GAAG,EAAE,EAAE;QAChC2D,iBAAiB,GAAG5D,CAAC;QACrB;MACF;IACF;;IAEA;;IAEA;IACA,IAAI4D,iBAAiB,GAAG,CAAC,EAAE;MACzBzE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD;IACF,CAAC,MAAM,IAAIwE,iBAAiB,GAAG,CAAC,EAAE;MAChC;MACA;IACF;IAEA,IAAIlB,iBAAiB,GAAID,aAAa,CAACxC,MAAM,GAAE,CAAE,CAAC,CAAC;IACnD;IACA,KAAK,IAAI4D,UAAU,GAAGD,iBAAiB,EAAEC,UAAU,GAAGpB,aAAa,CAACxC,MAAM,EAAE4D,UAAU,EAAE,EAAE;MACxF,IAAIpB,aAAa,CAACoB,UAAU,CAAC,CAACpC,KAAK,CAAC,GAAG,CAAC,CAACxB,MAAM,KAAK,CAAC,EAAE;QACrDyC,iBAAiB,GAAGmB,UAAU;QAC9B;MACF;IACF;;IAEAtB,aAAa,CAACqB,iBAAiB,EAAEnB,aAAa,EAAEC,iBAAiB,CAAC;IAElE,MAAMoB,IAAI,GAAGJ,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;;IAE9C;IACAG,IAAI,CAACC,SAAS,GAAG,EAAE;;IAEnB;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;;IAEAlF,eAAe,CAACmF,OAAO,CAACC,WAAW,IAAI;MACrC,KAAK,IAAI,CAAC/D,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAAC4D,WAAW,CAAC,EAAE;QACpD9E,OAAO,CAACC,GAAG,CAAC,OAAO,GAAEc,GAAG,GAAE,WAAW,GAAEC,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC;EACJ;EAEA,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAK,SAAS,EAAC,UAAU;MAAA,wBACvB;QAAU,EAAE,EAAC,WAAW;QAAC,SAAS,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAE,eAChD;QAAQ,OAAO,EAAEmD,eAAgB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB;IAAA;MAAA;MAAA;MAAA;IAAA,QACjD,eACN;MAAK,SAAS,EAAC,kBAAkB;MAAA,wBAC/B;QAAK,EAAE,EAAC,OAAO;QAAC,SAAS,EAAC,OAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAY,eAC7C;QAAK,EAAE,EAAC,aAAa;QAAC,SAAS,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QACvC,eACN;QAAK,EAAE,EAAC,QAAQ;QAAC,SAAS,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAC7B;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,KA3fQ3E,GAAG;AA6fZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}