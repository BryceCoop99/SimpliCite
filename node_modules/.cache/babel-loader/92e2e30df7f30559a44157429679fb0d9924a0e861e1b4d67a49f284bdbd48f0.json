{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  /* {Quote: [[Citation][Errors]], ...}*/\n  /** \n  {Quote: [[Citation][Errors]], ...}\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let citations;\n  let citation; // HMmm....\n  let documentErrors;\n  let dataEntriesList;\n  let quoteObj;\n  let citationsList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation\n\n  // function stripParenthesis(citation) {\n  //   return citation.replace(/[{()}]/g, '');\n  // }\n\n  function stripQuotations(quote) {\n    return quote.replace(/['\"]+/g, '');\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation) {\n    // console.log(\"Adding citation to array\");\n    quote = stripQuotations(quote);\n    if (quote in quoteObj) {\n      let values = quotesList[quote];\n      let citationObj;\n      if (values === undefined) {\n        // Initialize the value for the citation\n        console.log(\"Initializing structure\");\n        citationObj = {};\n        citationObj[citation] = [];\n        values = [];\n        values.unshift(citationObj);\n        // console.log(\"Checking: \" +citationObj[values][0])\n      } else {\n        citationObj = {};\n        citationObj[citation] = [];\n        values.unshift(citationObj);\n      }\n      console.log(citationObj);\n      // quotesList.quote = values;\n      for (let [key, value] of Object.entries(citationObj)) {\n        console.log(\"Key: \" + key + \" Value: \" + value);\n      }\n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n    console.log(\"Quotes List: \" + JSON.stringify(quotesList));\n  }\n  function checkQuoteInList(quote) {\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let [key, value] = Object.entries(dataEntriesList(i));\n      if (quote === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function addQuote(quote) {\n    // console.log(\"Adding quote to array!\");\n    quote = stripQuotations(quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    if (dataHasQuote) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      const newObj = [];\n      console.log(\"Quote to add: \" + quote);\n      quotesList[quote] = values;\n      dataEntriesList.push();\n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" + JSON.stringify(quotesList));\n    console.log(\"Data Entries\");\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      console.log(dataEntriesList[i]);\n    }\n  }\n  function addError(quote, errorHeader, error) {\n    console.log(\"Adding error to array!\");\n    if (errorHeader.includes(\"addQuoteError\")) {\n      if (quote in quotesList) {// If the quote is already in the quotesList objects, add it!\n      } else {\n        // Intialize it instead and then add it!\n        const errorArray = [error];\n        console.log(errorArray);\n        const citationArray = [];\n        console.log(citationArray);\n        const values = [];\n        values.push(citationArray);\n        values.push(errorArray);\n        console.log(values);\n        quotesList.quote = values;\n      }\n    } else if (errorHeader.includes(\"addCitationError\")) {}\n    for (let [key, value] in Object.entries(quotesList)) {\n      console.log(\"Key: \" + key + \" Value: \" + value);\n    }\n  }\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      // Else, keep the word!\n      return word;\n    }\n  }\n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    addQuote(wordsInQuote.join(\" \"));\n  }\n  function findMlaBlockCitation(wordsInSection) {\n    if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n      // Checks if last word contains ending parenthesis. Possible block citation!\n\n      /* Going backwards in this section! :) */\n      for (let j = wordsInSection.length - 1; j > 0; j--) {\n        let word = wordsInSection[j];\n        if (word.includes(\"(\")) {\n          // If has opening paren, then citation exists!\n          console.log(\"Block section!\");\n          citation.unshift(word);\n          addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n          return true;\n        }\n        citation.unshift(word);\n      }\n    }\n    return false;\n  }\n\n  /* */\n  function findMlaCitations(word, startedCitationIndex, i) {\n    if (!word.includes(\"(\") && startedCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      // console.log(\"Citation does not come right after quote\");\n      return false;\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\")) {\n      // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    return false;\n  }\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuote;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        containsQuote = false;\n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        let quote;\n        let error;\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === wordsInSection.length - 1) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              containsQuotationError = true;\n              break;\n            }\n          }\n          quote = wordsInQuote.join(\" \");\n          quote = stripQuotations(quote); // Strip the quote because it's not necessary anymore.\n          addQuote(quote);\n          if (containsQuotationError) {\n            // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addError(quote, \"addQuoteError\", error);\n          }\n          let startedCitationIndex = i;\n          let containsCitation = false;\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            const foundCitation = findMlaCitations(word, startedCitationIndex + 1, i);\n            if (foundCitation) {\n              // If citation was found\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === wordsInSection.length - 1) {\n              // If last word in section and no citation found, break...\n              console.log(\"No citation found for quote...\"); // ERROR!\n              break;\n            }\n          }\n          if (containsCitation) {\n            addCitation(quote, citation.join(\" \"));\n            // console.log(\"Citations: \" +citations);\n          } else {\n            let mostRecentQuoteIndex = quotesList.length - 1;\n            console.log(\"Quote: \" + quotesList[mostRecentQuoteIndex] + \" does not have a citation\");\n          }\n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        }\n      }\n\n      if (!containsQuote) {\n        // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = findMlaBlockCitation(wordsInSection);\n        if (containsCitation) {\n          citations.push(citation);\n          console.log(\"Citations: \" + citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    citations = [];\n    citation = [];\n    documentErrors = {};\n    quotesList = {};\n    citationsList = {};\n    dataEntriesList = [];\n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited = inputSections.length - 1; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","citations","citation","documentErrors","dataEntriesList","quoteObj","citationsList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","stripQuotations","quote","replace","addCitation","values","quotesList","citationObj","undefined","console","log","unshift","key","value","Object","entries","JSON","stringify","checkQuoteInList","i","length","addQuote","dataHasQuote","newObj","push","addError","errorHeader","error","includes","errorArray","citationArray","removeMlaDecimal","word","chars","split","result","slice","addMlaBlockQuote","wordsInSection","lastIndex","wordsInQuote","join","findMlaBlockCitation","j","findMlaCitations","startedCitationIndex","finalWord","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","containsQuote","charCodeAt","containsQuotationError","containsFinalQuote","containsCitation","foundCitation","mostRecentQuoteIndex","checkMlaHandler","e","preventDefault","inputText","document","getElementById","startParsingIndex","sectionNum","root","innerHTML"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n  \n  /* {Quote: [[Citation][Errors]], ...}*/\n  /** \n  {Quote: [[Citation][Errors]], ...}\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let citations;\n  let citation; // HMmm....\n  let documentErrors;\n  let dataEntriesList;\n  let quoteObj;\n  let citationsList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation\n  \n  // function stripParenthesis(citation) {\n  //   return citation.replace(/[{()}]/g, '');\n  // }\n  \n  function stripQuotations(quote) {\n    return quote.replace(/['\"]+/g, '');\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation) {\n    // console.log(\"Adding citation to array\");\n    quote = stripQuotations(quote);\n    \n    if (quote in quoteObj) {\n      let values = quotesList[quote];\n      let citationObj;\n      \n      if (values === undefined) { // Initialize the value for the citation\n        console.log(\"Initializing structure\");\n        citationObj = {};\n        citationObj[citation] = [];\n        values = [];\n        values.unshift(citationObj);\n        // console.log(\"Checking: \" +citationObj[values][0])\n      } else {\n        citationObj = {};\n        citationObj[citation] = [];\n        values.unshift(citationObj);\n      }\n      \n      console.log(citationObj);\n      // quotesList.quote = values;\n      for (let [key, value] of Object.entries(citationObj)) {\n        console.log(\"Key: \" +key+ \" Value: \" +value);\n      }\n      \n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n    console.log(\"Quotes List: \" +JSON.stringify(quotesList));\n    \n  }\n  \n  function checkQuoteInList(quote) {\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let [key, value] = Object.entries(dataEntriesList(i));\n      if (quote === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  function addQuote(quote) {\n    // console.log(\"Adding quote to array!\");\n    quote = stripQuotations(quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    \n    if (dataHasQuote) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      const newObj = [];\n      console.log(\"Quote to add: \" +quote);\n      quotesList[quote] = values;\n      dataEntriesList.push()\n      \n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" +JSON.stringify(quotesList));\n    console.log(\"Data Entries\");\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      console.log(dataEntriesList[i]);\n    }\n    \n  }\n  \n  function addError(quote, errorHeader, error) {\n    console.log(\"Adding error to array!\");\n    if (errorHeader.includes(\"addQuoteError\")) {\n      if (quote in quotesList) { // If the quote is already in the quotesList objects, add it!\n        \n      } else { // Intialize it instead and then add it!\n        const errorArray = [error];\n        console.log(errorArray);\n        const citationArray = [];\n        console.log(citationArray);\n        const values = [];\n        values.push(citationArray);\n        values.push(errorArray);\n        console.log(values);\n        quotesList.quote = values;\n        \n      }\n      \n    } else if (errorHeader.includes(\"addCitationError\")) {\n      \n    }\n    \n    for (let [key, value] in Object.entries(quotesList)) {\n      console.log(\"Key: \" +key+ \" Value: \" +value);\n    }\n    \n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else { // Else, keep the word!\n      return word;\n    }\n  }\n  \n  function addMlaBlockQuote(wordsInSection, lastIndex) {\n    let wordsInQuote = [];\n    \n    for (let i = 0; i < lastIndex; i++) {\n      const word = wordsInSection[i];\n      wordsInQuote.push(word);\n    }\n    \n    addQuote(wordsInQuote.join(\" \"));\n  }\n  \n  function findMlaBlockCitation(wordsInSection) {\n    \n    if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n    \n      /* Going backwards in this section! :) */\n      for (let j = (wordsInSection.length -1); j > 0; j--) {\n        let word = wordsInSection[j];\n        \n        if (word.includes(\"(\")) { // If has opening paren, then citation exists!\n          console.log(\"Block section!\");\n          citation.unshift(word);\n          addMlaBlockQuote(wordsInSection, j); // Get the whole block quote and add it!\n          return true;\n        }\n        citation.unshift(word);\n      }\n    }\n    \n    return false;\n  }\n  \n  /* */\n  function findMlaCitations(word, startedCitationIndex, i) {\n    \n    if (!word.includes(\"(\") && (startedCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      // console.log(\"Citation does not come right after quote\");\n      return false;\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\")) { // If citation is right after quote.\n      word.replace(/[(]/g, ''); //Replaces start parenthesis with empty.\n      // console.log(word);\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return true;\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return true;\n      \n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    \n    return false;\n  }\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      const wordsInSection = inputSections[secIndex].split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuote;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        containsQuote = false;\n        citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        let quote;\n        let error;\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuote = true;\n              // console.log(\"Correct word! It was: \" +word);\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === (wordsInSection.length -1)) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              containsQuotationError = true;\n              break;\n            }\n          }\n          \n          quote = wordsInQuote.join(\" \");\n          quote = stripQuotations(quote); // Strip the quote because it's not necessary anymore.\n          addQuote(quote);\n          \n          if (containsQuotationError) { // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addError(quote, \"addQuoteError\", error);\n          }\n          \n          let startedCitationIndex = i;\n          let containsCitation = false;\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            const foundCitation = findMlaCitations(word, startedCitationIndex+1, i);\n            \n            if (foundCitation) { // If citation was found\n              console.log(\"Citation found\");\n              containsCitation = true;\n              break;\n            } else if (i === (wordsInSection.length -1)) { // If last word in section and no citation found, break...\n              console.log(\"No citation found for quote...\"); // ERROR!\n              break;\n            }\n            \n          }\n          \n          if (containsCitation) {\n            addCitation(quote, citation.join(\" \"));\n            // console.log(\"Citations: \" +citations);\n          } else {\n            let mostRecentQuoteIndex = (quotesList.length -1);\n            console.log(\"Quote: \" +quotesList[mostRecentQuoteIndex]+ \" does not have a citation\");\n          }\n          \n          citation = []; // AAAGHHH!! DON'T FORGET TO RESET THIS!!!\n        \n        }\n      }\n      \n      if (!containsQuote) { // If the section does not contain a quote. Could it be a block citation?\n        let containsCitation = findMlaBlockCitation(wordsInSection);\n        \n        if (containsCitation) {\n          citations.push(citation);\n          console.log(\"Citations: \" +citations);\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    citations = [];\n    citation = [];\n    documentErrors = {};\n    quotesList = {};\n    citationsList = {};\n    dataEntriesList = [];\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited = (inputSections.length -1); // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}