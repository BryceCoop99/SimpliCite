{"ast":null,"code":"var _jsxFileName = \"/usr/share/caddy/personal/formatter/src/App.js\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  /* [{Quote: [[{Citation: [Citation Errors]}], [Quote Errors]]}, {...}, ...]*/\n  /**\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n\n  // Need Valid MLA inline-citation\n\n  // function stripParenthesis(citation) {\n  //   return citation.replace(/[{()}]/g, '');\n  // }\n\n  function stripQuotations(quote) {\n    // console.log(typeof editQuote);\n\n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length - 1))) {\n      quote = quote.substring(0, quote.length - 1);\n    }\n    quote.replace(\"\\\"\", \"\");\n    console.log(quote);\n    return quote;\n  }\n  function checkCitationInList(quote, citation) {\n    let citationObj = undefined;\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let [key, value] = Object.entries(dataEntriesList[i]);\n      if (quote === key) {\n        if (value.length === 2) {\n          citationObj = value[0];\n          let citeKey = Object.keys(citationObj);\n          if (citeKey === citation) {\n            console.log(\"Citation exists in data!\");\n            return citationObj;\n          }\n        } else if (value.length === 1) {\n          console.log(\"How?\");\n        } else {}\n      }\n    }\n    return citationObj;\n  }\n  function checkQuoteInList(quote) {\n    quote = stripQuotations(quote);\n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let key = Object.keys(dataEntriesList[i]);\n      if (quote === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation) {\n    // console.log(\"Adding citation to array\");\n    quote = stripQuotations(quote);\n    let citationObj = checkCitationInList(quote, citation);\n    let values = citationObj;\n    if (citationObj === undefined) {\n      if (values === undefined) {\n        // Initialize the value for the citation\n        console.log(\"Initializing structure\");\n        citationObj = {};\n        citationObj[citation] = [];\n        values = [];\n        values.unshift(citationObj);\n        // console.log(\"Checking: \" +citationObj[values][0])\n      } else {\n        citationObj = {};\n        citationObj[citation] = [];\n        values.unshift(citationObj);\n      }\n      console.log(citationObj);\n      // quotesList.quote = values;\n      for (let [key, value] of Object.entries(citationObj)) {\n        console.log(\"Key: \" + key + \" Value: \" + value);\n      }\n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n  }\n  function addQuote(quote) {\n    // console.log(\"Adding quote to array!\");\n    quote = stripQuotations(quote);\n    console.log(\"Stripped quote: \" + quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    let newObj = undefined;\n    if (dataHasQuote) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      newObj = {};\n      console.log(\"Quote to add: \" + quote);\n      newObj[quote] = [];\n      dataEntriesList.push(newObj);\n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" + JSON.stringify(newObj));\n    console.log(\"Data Entries\");\n    if (newObj !== undefined) {\n      for (let i = 0; i < dataEntriesList.length; i++) {\n        console.log(dataEntriesList[i]);\n      }\n    }\n  }\n  function addDocumentError(errorMessage) {\n    let citation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (citation !== undefined) {\n      let newObj = {};\n      newObj[citation] = errorMessage;\n      citationsErrorList.push(newObj);\n    } else {\n      documentErrorList.push(errorMessage);\n    }\n  }\n\n  // function addCitationError(quote, citation, errorMessage) {\n  //   const dataHasQuote = checkQuoteInList(quote);\n\n  //     if (dataHasQuote) {\n  //       let index = 0;\n\n  //       for (let i = 0; i < dataEntriesList.length; i++) {\n  //         let [key, value] = Object.keys(dataEntriesList(i));\n  //         if (quote === key) {\n  //           index = i;\n  //           break;\n  //         }\n  //       }\n\n  //       // Do citation work\n  //     }\n\n  // }\n\n  function addQuoteError(quote, errorMessage) {\n    console.log(\"Adding quote error!\");\n    quote = stripQuotations(quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    if (dataHasQuote) {\n      let index = 0;\n      for (let i = 0; i < dataEntriesList.length; i++) {\n        let key = Object.keys(dataEntriesList[i]);\n        if (quote === key) {\n          index = i;\n          break;\n        }\n      }\n      let value = Object.keys(dataEntriesList)[index];\n      value.push(errorMessage);\n      console.log(\"Error pushed into quote\");\n    } else {\n      console.log(\"SYSTEM ERROR: shouldn't add error before quote is made\");\n    }\n\n    // for (let [key, value] in Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n  }\n\n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[word.length - 1] === '.') {\n      // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else {\n      // Else, keep the word!\n      return word;\n    }\n  }\n  function findMlaBlockCitation(wordsInSection) {\n    if (wordsInSection[wordsInSection.length - 1].includes(\")\")) {\n      // Checks if last word contains ending parenthesis. Possible block citation!\n      let citation = [];\n      let quote = [];\n\n      /* Going backwards in this section! :) */\n      for (let i = 0; i < wordsInSection - 1; i++) {\n        let startedCitationIndex = i;\n        while (true) {\n          i++;\n          let word = wordsInSection[i];\n          citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n          if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n            // If citation was found\n            addQuote(quote.join(\" \"));\n            addCitation(quote.join(\" \"), citation.join(\" \"));\n            return true;\n          } else if (!citation[0].includes(\"(\")) {\n            quote.push(word);\n          } else if (citation[0].includes(\"(\")) {\n            citation.push(word);\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    if (!word.includes(\"(\") && startedCitationIndex === i) {\n      // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [citation.join(\" \")];\n      // Do more...\n\n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n\n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n\n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n\n      //   }\n\n      // }\n    } else if (word.includes(\"(\") && startedCitationIndex === i) {\n      // If citation is right after quote.\n      // word.replace(/[(]/g, '');\n\n      if (word.includes(\")\")) {\n        // If word is also end of citation too.\n        // word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n    } else if (word.includes(\")\")) {\n      // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    return [citation.join(\" \")];\n  }\n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n\n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n\n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        // console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) {\n          // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          while (true) {\n            // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            const containsFinalQuote = lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length - 1));\n            wordsInQuote.push(word);\n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) {\n              // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === wordsInSection.length - 1) {\n              // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              containsQuotationError = true;\n              break;\n            }\n          }\n          quote = wordsInQuote.join(\" \");\n          quote = stripQuotations(quote); // Strip the quote because it's not necessary anymore.\n          addQuote(quote);\n          if (containsQuotationError) {\n            // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n\n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n\n            citation = findMlaCitations(word, startedCitationIndex + 1, i, citation);\n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) {\n              // If citation was found\n              containsCitation = true;\n              break;\n            } else if (i === wordsInSection.length - 1) {\n              // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          if (citation !== undefined) {\n            citation = citation[0];\n          }\n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addDocumentError(\"No quote exists for the given citation\", citation);\n          } else {\n            let quoteKey = Object.keys(dataEntriesList.length - 1);\n            console.log(\"Quote: \" + quoteKey + \" does not have a citation\");\n          }\n\n          /* Add Citation error if there is one!*/\n        }\n      }\n\n      if (!containsQuoteInSection) {\n        // If the section does not contain a quote. Could it be a block citation?\n        console.log(\"Trying block quote\");\n        let isBlockCitation = findMlaBlockCitation(wordsInSection);\n        if (isBlockCitation) {\n          console.log(\"It is a Block Citation\");\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n\n    if (inputText === undefined) {\n      return;\n    }\n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" + inputSections.length);\n\n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n\n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n\n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    let sectionWorksCited = inputSections.length - 1; // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n\n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    const root = document.getElementById(\"result\");\n\n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n\n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n\n    //   error.appendChild(errorText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n\n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n\n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n\n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n\n    //   root.appendChild(row);\n    // }\n\n    dataEntriesList.forEach(quoteObject => {\n      for (let [key, value] in Object.entries(quoteObject)) {\n        console.log(\"Key: \" + key + \"\\nValue: \" + value);\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"document\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"inputText\",\n        className: \"inputText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkMlaHandler,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title\",\n        className: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-errors\",\n        className: \"main-errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\",\n        className: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 499,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","documentErrorList","dataEntriesList","citationsErrorList","firstDoubleQuote_CharValues","lastDoubleQuote_CharValues","stripQuotations","quote","includes","charCodeAt","substring","length","replace","console","log","checkCitationInList","citation","citationObj","undefined","i","key","value","Object","entries","citeKey","keys","checkQuoteInList","addCitation","values","unshift","addQuote","dataHasQuote","newObj","push","JSON","stringify","addDocumentError","errorMessage","addQuoteError","index","removeMlaDecimal","word","chars","split","result","slice","findMlaBlockCitation","wordsInSection","startedCitationIndex","findMlaCitations","join","finalWord","findMlaQuotes","startingIndex","inputSections","sectionWorksCited","secIndex","currentSection","containsQuoteInSection","containsQuote","error","wordsInQuote","containsQuotationError","containsFinalQuote","containsCitation","quoteKey","isBlockCitation","checkMlaHandler","e","preventDefault","inputText","document","getElementById","startParsingIndex","sectionNum","root","innerHTML","forEach","quoteObject"],"sources":["/usr/share/caddy/personal/formatter/src/App.js"],"sourcesContent":["import './App.css';\n\nfunction App() {\n  \n  /* [{Quote: [[{Citation: [Citation Errors]}], [Quote Errors]]}, {...}, ...]*/\n  /**\n  Errors: documentErrors, intextErrors, worksCitedErrors.\n  \n  */\n  let documentErrorList;\n  let dataEntriesList;\n  let citationsErrorList;\n  const firstDoubleQuote_CharValues = [8220, 34];\n  const lastDoubleQuote_CharValues = [8221, 34];\n  \n  // Need Valid MLA inline-citation\n  \n  // function stripParenthesis(citation) {\n  //   return citation.replace(/[{()}]/g, '');\n  // }\n  \n  function stripQuotations(quote) {\n    // console.log(typeof editQuote);\n    \n    if (firstDoubleQuote_CharValues.includes(quote.charCodeAt(0))) {\n      quote = quote.substring(1);\n    }\n    if (lastDoubleQuote_CharValues.includes(quote.charCodeAt(quote.length -1))) {\n      quote = quote.substring(0, (quote.length -1));\n    }\n    quote.replace(\"\\\"\", \"\");\n    \n    console.log(quote);\n    \n    return quote;\n  }\n  \n  function checkCitationInList(quote, citation) {\n    let citationObj = undefined;\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let [key, value] = Object.entries(dataEntriesList[i]);\n      \n      if (quote === key) {\n        \n        if (value.length === 2) {\n          citationObj = value[0];\n          let citeKey = Object.keys(citationObj);\n          \n          if (citeKey === citation) {\n            console.log(\"Citation exists in data!\");\n            return citationObj;\n          }\n          \n        } else if (value.length === 1) {\n          console.log(\"How?\");\n          \n        } else {\n          \n        }\n      }\n    }\n    \n    return citationObj;\n  }\n  \n  function checkQuoteInList(quote) {\n    quote = stripQuotations(quote);\n    \n    for (let i = 0; i < dataEntriesList.length; i++) {\n      let key = Object.keys(dataEntriesList[i]);\n      \n      if (quote === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /* For now, there should only be one quote per citation! This will flip some time soon*/\n  function addCitation(quote, citation) {\n    // console.log(\"Adding citation to array\");\n    quote = stripQuotations(quote);\n    let citationObj = checkCitationInList(quote, citation);\n    let values = citationObj;\n    \n    if (citationObj === undefined) {\n      \n      if (values === undefined) { // Initialize the value for the citation\n        console.log(\"Initializing structure\");\n        citationObj = {};\n        citationObj[citation] = [];\n        values = [];\n        values.unshift(citationObj);\n        // console.log(\"Checking: \" +citationObj[values][0])\n      } else {\n        citationObj = {};\n        citationObj[citation] = [];\n        values.unshift(citationObj);\n      }\n      \n      console.log(citationObj);\n      // quotesList.quote = values;\n      for (let [key, value] of Object.entries(citationObj)) {\n        console.log(\"Key: \" +key+ \" Value: \" +value);\n      }\n      \n    } else {\n      console.log(\"There's no quote for this citation!\");\n    }\n    \n  }\n  \n  function addQuote(quote) {\n    // console.log(\"Adding quote to array!\");\n    quote = stripQuotations(quote);\n    console.log(\"Stripped quote: \" +quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    let newObj = undefined;\n    \n    if (dataHasQuote) {\n      console.log(\"Trying to add another of the same quote, ehh?\");\n    } else {\n      newObj = {};\n      console.log(\"Quote to add: \" +quote);\n      newObj[quote] = [];\n      dataEntriesList.push(newObj);\n      \n    }\n    // for (let [key, value] of Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n    console.log(\"Quotes List: \" +JSON.stringify(newObj));\n    console.log(\"Data Entries\");\n    \n    if (newObj !== undefined) {\n      for (let i = 0; i < dataEntriesList.length; i++) {\n        console.log(dataEntriesList[i]);\n      }\n    }\n    \n  }\n  \n  function addDocumentError(errorMessage, citation = undefined) {\n    if (citation !== undefined) {\n      let newObj = {};\n      newObj[citation] = errorMessage;\n      citationsErrorList.push(newObj);\n    } else {\n      documentErrorList.push(errorMessage);\n    }\n    \n  }\n  \n  // function addCitationError(quote, citation, errorMessage) {\n  //   const dataHasQuote = checkQuoteInList(quote);\n      \n  //     if (dataHasQuote) {\n  //       let index = 0;\n        \n  //       for (let i = 0; i < dataEntriesList.length; i++) {\n  //         let [key, value] = Object.keys(dataEntriesList(i));\n  //         if (quote === key) {\n  //           index = i;\n  //           break;\n  //         }\n  //       }\n        \n  //       // Do citation work\n  //     }\n    \n  // }\n  \n  function addQuoteError(quote, errorMessage) {\n    console.log(\"Adding quote error!\");\n    \n    quote = stripQuotations(quote);\n    const dataHasQuote = checkQuoteInList(quote);\n    \n    if (dataHasQuote) {\n      let index = 0;\n      \n      for (let i = 0; i < dataEntriesList.length; i++) {\n        let key = Object.keys(dataEntriesList[i]);\n        \n        if (quote === key) {\n          index = i;\n          break;\n        }\n      }\n      \n      let value = Object.keys(dataEntriesList)[index];\n      value.push(errorMessage);\n      console.log(\"Error pushed into quote\");\n      \n    } else {\n      console.log(\"SYSTEM ERROR: shouldn't add error before quote is made\");\n    }\n    \n    // for (let [key, value] in Object.entries(quotesList)) {\n    //   console.log(\"Key: \" +key+ \" Value: \" +value);\n    // }\n  }\n  \n  function removeMlaDecimal(word) {\n    const chars = word.split('');\n    if (chars[(word.length-1)] === '.') { // If the last character is a decimal, remove it!\n      // console.log(\"TRUE! Removing decimal\");\n      const result = word.slice(0, -1);\n      return result;\n    } else { // Else, keep the word!\n      return word;\n    }\n  }\n  \n  function findMlaBlockCitation(wordsInSection) {\n    \n    if (wordsInSection[wordsInSection.length -1].includes(\")\")) { // Checks if last word contains ending parenthesis. Possible block citation!\n      let citation = [];\n      let quote = [];\n    \n      /* Going backwards in this section! :) */\n      for (let i = 0; i < (wordsInSection -1); i++) {\n        let startedCitationIndex = i;\n        \n        while (true) {\n          i++;\n          let word = wordsInSection[i];\n          \n          citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n          \n          if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n            addQuote(quote.join(\" \"));\n            addCitation(quote.join(\" \"), citation.join(\" \"));\n            return true;\n          } else if (!citation[0].includes(\"(\")) {\n            quote.push(word);\n          } else if (citation[0].includes(\"(\")) {\n            citation.push(word);\n          }\n        }\n      }\n    }\n    \n    return false;\n  }\n  \n  /* */\n  function findMlaCitations(word, startedCitationIndex, i, citation) {\n    \n    if (!word.includes(\"(\") && (startedCitationIndex === i)) { // If beginning of citation and doesn't include open parenthesis.\n      console.log(\"Citation does not come right after quote! WHOOPS\");\n      return [citation.join(\" \")];\n      // Do more...\n      \n      // If citing doesn't come right after quote, check if it's later in the same section.\n      // while (true) {\n      //   i++;\n      //   word = inputWords[i];\n        \n      //   // Check if the next word is the citing.\n      //   if (word.includes(\"(\")) {\n          \n          \n      //   } else { // If the word doesn't contain a parenthesis, find the next quote.\n          \n      //   }\n        \n      // }\n      \n    } else if (word.includes(\"(\") && (startedCitationIndex === i)) { // If citation is right after quote.\n      // word.replace(/[(]/g, '');\n      \n      if (word.includes(\")\")) { // If word is also end of citation too.\n        // word.replace(/[)]/g, '');\n        // console.log(word);\n        const finalWord = removeMlaDecimal(word);\n        citation.push(finalWord);\n        return [citation.join(\" \")];\n      }\n      // if (word.includes(\",\")) { // If the word has a comma, remove it\n      //   word.replace(/[,]/g, '');\n      // }\n      citation.push(word);\n      \n    } else if (word.includes(\")\")) { // If this is the end of the citation.\n      word.replace(/[)]/g, '');\n      // console.log(word);\n      const finalWord = removeMlaDecimal(word);\n      citation.push(finalWord);\n      return [citation.join(\" \")];\n      \n    } else {\n      // console.log(word);\n      citation.push(word);\n    }\n    \n    return [citation.join(\" \")];\n  }\n  \n  function findMlaQuotes(startingIndex, inputSections, sectionWorksCited) {\n    // console.log(startingIndex+ \" \" +inputSections+ \" \" +sectionWorksCited);\n    \n    for (let secIndex = startingIndex; secIndex < sectionWorksCited; secIndex++) {\n      // console.log(\"Section index: \" +secIndex);\n      let currentSection = inputSections[secIndex].replace('\\t', \"\");\n      const wordsInSection = currentSection.split(\" \");\n      // console.log(wordsInSection.length);\n      let containsQuoteInSection = false;\n      \n      /* Time to find the quotes in a section*/\n      for (let i = 0; i < wordsInSection.length; i++) {\n        let word = wordsInSection[i];\n        // console.log(\"Char code? \" +word+ \" \" +word.charCodeAt((word.length -1)));\n        // console.log(word);\n        let containsQuote = false;\n        let quote;\n        let error;\n        \n        if (firstDoubleQuote_CharValues.includes(word.charCodeAt(0))) { // First quoted word found, now find the last.\n          // console.log(\"Checking: \" +word);\n          let wordsInQuote = [];\n          wordsInQuote.push(word);\n          let containsQuotationError = false;\n          \n          while (true) { // Checking word with ending quotation marks!\n            i++;\n            word = wordsInSection[i];\n            \n            const containsFinalQuote = (lastDoubleQuote_CharValues.includes(word.charCodeAt(word.length -1)));\n            wordsInQuote.push(word);\n            \n            if (containsFinalQuote) {\n              containsQuoteInSection = true;\n              containsQuote = true;\n              break;\n            } else if (word.includes(\"(\")) { // If a citation comes before an ending parenthesis, tell the user.\n              error = \"Missing ending parenthesis. Is it possible that a parenthesis was added inside of a quote?\";\n              containsQuotationError = true;\n              break;\n            } else if (i === (wordsInSection.length -1)) { // If this is the last word in the section and doesn't contain any quotes, tell the user.\n              error = \"Missing ending quotation marks!\";\n              containsQuotationError = true;\n              break;\n            }\n          }\n          \n          quote = wordsInQuote.join(\" \");\n          quote = stripQuotations(quote); // Strip the quote because it's not necessary anymore.\n          addQuote(quote);\n          \n          if (containsQuotationError) { // If there is a quotation error, go back 1 word and give error to almost made quotation!\n            i--;\n            addQuoteError(quote, error);\n          }\n          \n          let startedCitationIndex = i;\n          let containsCitation = false;\n          let citation = [];\n          \n          // Get the citing of the quote after the quotation marks.\n          while (true) {\n            i++;\n            word = wordsInSection[i];\n            // console.log(word);\n            \n            citation = findMlaCitations(word, startedCitationIndex+1, i, citation);\n            \n            if (citation[0].includes(\")\") && citation[0].includes(\"(\")) { // If citation was found\n              containsCitation = true;\n              break;\n            } else if (i === (wordsInSection.length -1)) { // If last word in section and no citation found, break...\n              addQuoteError(quote, \"No citation found for quote\");\n              break;\n            }\n          }\n          \n          if (citation !== undefined) {\n            citation = citation[0];\n          }\n          \n          if (containsCitation && containsQuote) {\n            addCitation(quote, citation);\n            // console.log(\"Citations: \" +citations);\n          } else if (containsCitation) {\n            addDocumentError(\"No quote exists for the given citation\", citation);\n          } else {\n            let quoteKey = (Object.keys(dataEntriesList.length -1));\n            console.log(\"Quote: \" +quoteKey+ \" does not have a citation\");\n          }\n          \n          /* Add Citation error if there is one!*/\n          \n        }\n      }\n      \n      if (!containsQuoteInSection) { // If the section does not contain a quote. Could it be a block citation?\n        console.log(\"Trying block quote\");\n        let isBlockCitation = findMlaBlockCitation(wordsInSection);\n        \n        if (isBlockCitation) {\n          console.log(\"It is a Block Citation\");\n        } else {\n          console.log(\"No citations in this paragraph! :)\");\n        }\n      }\n    }\n  }\n  \n  function checkMlaHandler(e) {\n    e.preventDefault();\n    documentErrorList = [];\n    citationsErrorList = [];\n    dataEntriesList = [];\n    \n    const inputText = document.getElementById(\"inputText\").value;\n    // console.log(inputText);\n    \n    if (inputText === undefined) {\n      return;\n    }\n    \n    const inputSections = inputText.split(\"\\n\");\n    // console.log(inputSections);\n    console.log(\"Number of sections: \" +inputSections.length);\n    \n    /* Find the starting paragraph to parse! */\n    let startParsingIndex = 0;\n    for (let i = 0; i < inputSections.length; i++) {\n      if (inputSections[i].length > 50) {\n        startParsingIndex = i;\n        break;\n      }\n    }\n    \n    // console.log(\"Starting section: \" +(startParsingIndex+1));\n    \n    /* If the starting section isn't 5, you are missing headers or added too many header/title lines */\n    if (startParsingIndex < 5) {\n      console.log(\"User is missing header information\");\n      return;\n    } else if (startParsingIndex > 6) {\n      // errors.push(\"User added too many header/title lines before introduction of paper\");\n      return;\n    }\n    \n    let sectionWorksCited = (inputSections.length -1); // Give the section works cited the last section so the loop can work.\n    /* Check where the Works Cited page might exist! */\n    for (let sectionNum = startParsingIndex; sectionNum < inputSections.length; sectionNum++) {\n      if (inputSections[sectionNum].split(\" \").length === 2) {\n        sectionWorksCited = sectionNum;\n        // console.log(\"Possible Works Cited page on section \" +(sectionNum+1)+ \"?\");\n      }\n    }\n    \n    findMlaQuotes(startParsingIndex, inputSections, sectionWorksCited);\n    \n    const root = document.getElementById(\"result\");\n    \n    /* This removes the nodes from the previous submitted text. */\n    root.innerHTML = '';\n    \n    // const errorsRoot = document.getElementById(\"main-errors\");\n    // for (let i = 0; i < errors.length; i++) {\n    //   let errorText = document.createTextNode(errors[i]);\n    //   let error = document.createElement(\"th\");\n      \n    //   error.appendChild(errorText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(error);\n    //   errorsRoot.appendChild(row);\n    // }\n    \n    // for (let i = 0; i < citations.length; i++) {\n    //   let citationText = document.createTextNode(citations[i]);\n    //   let quoteText = document.createTextNode(quotes[i]);\n      \n    //   let quote = document.createElement(\"th\");\n    //   let citation = document.createElement(\"th\");\n    //   quote.appendChild(quoteText);\n    //   citation.appendChild(citationText);\n      \n    //   let row = document.createElement(\"tr\");\n    //   row.appendChild(quote);\n    //   row.appendChild(citation);\n      \n    //   root.appendChild(row);\n    // }\n    \n    dataEntriesList.forEach(quoteObject => {\n      for (let [key, value] in Object.entries(quoteObject)) {\n        console.log(\"Key: \" +key+ \"\\nValue: \" +value);\n      }\n    });\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"document\">\n        <textarea id=\"inputText\" className=\"inputText\"/>\n        <button onClick={checkMlaHandler}>Check Text</button>\n      </div>\n      <div className=\"result-container\">\n        <div id=\"title\" className=\"title\">Title</div>\n        <div id=\"main-errors\" className=\"main-errors\">\n        </div>\n        <div id=\"result\" className=\"result\">\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}